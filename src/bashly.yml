name: cliferay
help: "Daily scripts to work with Liferay\n\nThe scripts can be run from any folder:\n  - If the folder is outside the repo it will use LIFERAY_HOME.\n  - If the folder is inside the repo it will use that repo. \n  \nFor example every day I open my terminal and type:\n\n  > cliferay morning\n\nand it will just work no matter which folder I am in.\n"
version: 1.0.0
environment_variables:
  - name: DEBUG
    help: Set to true to enable echoing of all the commands being run
    default: false
dependencies:
  gh:
    command: [gh]
    help: Install it from https://cli.github.com
commands:
  # cliferay

  - name: aliases
    help: Print aliases script
    private: true
    group: cliferay

  - name: completions
    help: Print completions script
    private: true
    group: cliferay

  - name: data-folder
    help: Print the data folder
    private: true
    group: cliferay

  - name: init
    help: Initialize cliferay
    dependencies:
      jira:
        command: [jira]
        help: Install it from https://github.com/ankitpokhrel/jira-cli/wiki/Installation
    flags:
      - long: --email
        arg: email
        help: Your Liferay email
        required: true
    group: cliferay

  - name: update
    help: Update cliferay to the latest version
    group: cliferay

  # Build

  - name: ant
    help: Run ant
    catch_all: true
    group: Build

  - name: build
    help: Run ant all
    group: Build

  - name: gw
    help: Run gradlew
    catch_all: true
    group: Build

  - name: ij
    help: Run liferay-intellij
    group: Build

  - name: morning
    help: Sync, build, ij, nuke and run
    flags:
      - long: --no-nuke
        help: Skip nuke
      - long: --force
        short: -f
        help: Force cleanup by running git clean -fdx
    group: Build

  # Server

  - name: curl
    help: Send HTTP requests to the server
    dependencies:
      jq:
        command: [jq]
        help: Install it from https://jqlang.github.io/jq
    commands:
      - name: ai
        help: Run a curl based on a prompt
        environment_variables:
          - name: OPENAI_API_KEY
            help: Your OpenAI API Key
            required: true
        args:
          - name: prompt
            help: The prompt
            required: true
        flags:
          - long: --generate
            short: -g
            help: Output the command, do not run it
        examples:
          - cliferay curl ai "create a sample blog posting"
          - cliferay curl ai "list all object definitions"
      - name: new-instance
        help: Create a new instance
        args:
          - name: host
            help: The virtual host
            default: www.able.com
        examples:
          - cliferay curl new-instance www.able.com
      - name: new-api
        help: Create a new API Builder API
      - name: new-object
        help: Create a new object definition with some entries
      - name: new-site-object
        help: Create a new site scoped object definition with some entries
      - name: batch-import
        help: Import a new object entry with batch
    group: Server

  - name: db-name
    help: Print the database name (lportal)
    group: Server
    private: true

  - name: elastic-search
    help: Query the Elastic Search index
    group: Server
    dependencies:
      jq:
        command: [jq]
        help: Install it from https://jqlang.github.io/jq

  - name: gogo
    help: Open the Gogo Shell
    examples:
      - cliferay gogo
      - cliferay gogo unsatisfied
      - cliferay gogo jaxrs:check
    catch_all:
      label: Command
      help: Optional Gogo shell command to run
    completions:
      - diag
      - unsatisfied
      - scr:list
      - jaxrs:check
    group: Server

  - name: kill
    help: Kill the server
    group: Server

  - name: nuke
    help: Delete all persisted data
    group: Server

  - name: run
    help: Start the server
    group: Server
    args:
      - name: command
        help: Tomcat command (jpda by default)
        required: false
    flags:
      - long: --clustered
        short: -c
        help: Launch portal in dual-cluster mode
        private: true

  - name: tomcat-folder
    help: Print the current tomcat folder
    group: Server
    private: true

  - name: sql
    help: Run a SQL query against the Liferay database
    args:
      - name: sql
        help: The SQL query to run
        required: true
    examples:
      - cliferay sql "SELECT COUNT(*) FROM User_"
    group: Server

  # Code

  - name: baseline
    help: Run baseline in the current folder
    group: Code

  - name: build-rest
    help: Run buildREST globally
    group: Code
    examples:
      - cliferay build-rest

  - name: changed-modules
    alias: cm
    help: List changed modules
    args:
      - name: folder
        help: The root folder to compare
    flags:
      - long: --branch
        short: -b
        arg: branch
        help: Branch to compare to
    group: Code

  - name: deploy
    alias: d
    help: Deploy the current folder
    group: Code

  - name: folder
    help: Print the current Liferay home folder
    group: Code
    private: true

  - name: format-source
    alias: sf
    help: Run SF globally
    group: Code

  - name: home
    help: Print the default Liferay home folder
    environment_variables:
      - name: LIFERAY_HOME
        help: Location of your main liferay-portal clone
        required: true
    private: true
    group: Code

  - name: owner
    help: Output the owner of a path based on CODEOWNERS
    examples:
      - cliferay owner modules/apps/headless/headless-builder
    args:
      - name: path
        help: The path to check
        default: .
    group: Code

  - name: poshi
    help: Run a Poshi test
    group: Code
    examples:
      - cliferay poshi GeneratePathStructureForEndpoints#CanValidatePathInAPIEndpoint
    args:
      - name: test
        help: The test to run
        required: true

  - name: super-deploy
    alias: sd
    help: Deploy changed modules
    args:
      - name: folder
        help: The root folder to compare
    flags:
      - long: --branch
        short: -b
        arg: branch
        help: Branch to compare to
    group: Code

  # Git

  - name: brian
    help: Forward an existing PR to Brian and close it
    group: Git
    examples:
      - cliferay brian https://github.com/liferay-headless/liferay-portal/pull/1433
    args:
      - name: pr
        help: Link to the GitHub PR
        required: true

  - name: backport
    alias: b
    help: Backport commits to other branches
    args:
      - name: text
        help: Text to filter commits by (LPD-1234)
        required: true
    flags:
      - long: --branch
        short: -b
        arg: branch
        help: Source branch
    group: Git

  - name: set-ticket
    help: Set the Jira ticket on your local commits
    group: Git
    examples:
      - cliferay set-ticket LPD-XXXX
    args:
      - name: ticket
        help: The ticket reference
        required: true
    flags:
      - long: --branch
        short: -b
        arg: branch
        help: Source branch

  - name: stats
    help: Calculate different Git stats
    group: Git
    commands:
      - name: users
        help: Get info about users
        commands:
          - name: jira
            help: Shows the jira id
            args:
              - name: user
                help: The user handle
                required: true
            examples:
              - cliferay stats users jira alejandro.tardin
          - name: emails
            help: Shows the user git emails
            args:
              - name: user
                help: The user handle
                required: true
            examples:
              - cliferay stats users emails alejandro.tardin
      - name: years
        help: Shows commit count per year
        args:
          - name: user
            help: The user
        examples:
          - cliferay stats years alejandro.tardin
      - name: ranking
        help: Shows commit ranking
        args:
          - name: emails
            help: The emails of the commit authors
            repeatable: true
        examples:
          - cliferay stats ranking alejandro.tardin@liferay.com
      - name: tickets
        help: Shows tickets worked on based on commits
        args:
          - name: user
            help: The user
        examples:
          - cliferay stats tickets alejandro.tardin
      - name: commits
        help: Print the commits for the user
        args:
          - name: user
            help: The user
        examples:
          - cliferay stats commits alejandro.tardin@liferay.com
      - name: folders
        help: Print the folders changed by the user
        args:
          - name: user
            help: The user
        examples:
          - cliferay stats folders alejandro.tardin@liferay.com
      - name: review
        help: Writes a review based on git and jira stats
        args:
          - name: user
            help: The user to be reviewed
        examples:
          - cliferay stats review alejandro.tardin@liferay.com
      - name: assigned
        help: Shows tickets ever assigned to the user
        args:
          - name: user
            help: The user
        examples:
          - cliferay stats assigned alejandro.tardin
      - name: headless-summary
        help: Shows tickets grouped by folder
        args:
          - name: user
            help: The user
            required: true
        examples:
          - cliferay stats headless-summary alejandro.tardin
  - name: sync
    help: Sync fork and local copy with upstream
    group: Git

  - name: tickets
    help: Get all Jira tickets from the output of git log
    group: Git
    examples:
      - git log | cliferay tickets

  # Jira

  - name: jira
    help: Open a Jira ticket in the browser
    args:
      - name: ticket
        help: The ticket reference (LPD-1234). If not present it will be extracted from the git branch name
    group: Jira

  # GTD

  - name: todo
    help: Create a todo in Trello
    environment_variables:
      - name: TRELLO_API_KEY
        help: Your Trello API Key https://developer.atlassian.com/cloud/trello/guides/rest-api/authorization
        required: true
      - name: TRELLO_TOKEN
        help: Your Trello Token https://trello.com/1/authorize?expiration=never&scope=read,write,account&response_type=token&key=TRELLO_API_KEY
        required: true
      - name: TRELLO_LIST_ID
        help: Your Trello List Id https://community.atlassian.com/forums/Trello-questions/How-do-I-find-the-LIST-ID/qaq-p/2272862
        required: true
    catch_all:
      label: title
      help: The todo title
      required: true
    examples:
      - cliferay todo Complete 100% of the milestone
      - cliferay todo Review PR http://gihub.com/...
    group: GTD

  - name: todos
    help: Lists todos from Trello
    environment_variables:
      - name: TRELLO_API_KEY
        help: Your Trello API Key https://developer.atlassian.com/cloud/trello/guides/rest-api/authorization
        required: true
      - name: TRELLO_TOKEN
        help: Your Trello Token https://trello.com/1/authorize?expiration=never&scope=read,write,account&response_type=token&key=TRELLO_API_KEY
        required: true
      - name: TRELLO_LIST_ID
        help: Your Trello List Id https://community.atlassian.com/forums/Trello-questions/How-do-I-find-the-LIST-ID/qaq-p/2272862
        required: true
    examples:
      - cliferay todos
    group: GTD
