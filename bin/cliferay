#!/usr/bin/env bash
# This script was generated by bashly 1.2.10 (https://bashly.dev)
# Modifying it manually is not recommended

# :wrapper.wrapper
cliferay() {
  # :command.master_script

  # :command.version_command
  version_command() {
    echo "$version"
  }

  # :command.usage
  cliferay_usage() {
    if [[ -n $long_usage ]]; then
      printf "cliferay\n\n"
      printf "  Daily scripts to work with Liferay\n  \n  The scripts can be run from any folder:\n    - If the folder is outside the repo it will use LIFERAY_HOME.\n    - If the folder is inside the repo it will use that repo. \n    \n  For example every day I open my terminal and type:\n  \n    > cliferay morning\n  \n  and it will just work no matter which folder I am in.\n\n"
    else
      printf "cliferay - Daily scripts to work with Liferay\n\n"
    fi

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay COMMAND\n"
    printf "  cliferay [COMMAND] --help | -h\n"
    printf "  cliferay --version | -v\n"
    echo
    # :command.usage_commands
    printf "%s\n" "$(bold "cliferay Commands:")"
    printf "  %s   Initialize cliferay\n" "$(green_bold "init")           "
    printf "  %s   Update cliferay to the latest version\n" "$(green_bold "update")         "
    echo
    printf "%s\n" "$(bold "Build Commands:")"
    printf "  %s   Run ant\n" "$(green_bold "ant")            "
    printf "  %s   Run ant all\n" "$(green_bold "build")          "
    printf "  %s   Run gradlew\n" "$(green_bold "gw")             "
    printf "  %s   Run liferay-intellij\n" "$(green_bold "ij")             "
    printf "  %s   Sync, build, ij, nuke and run\n" "$(green_bold "morning")        "
    echo
    printf "%s\n" "$(bold "Server Commands:")"
    printf "  %s   Send HTTP requests to the server\n" "$(green_bold "curl")           "
    printf "  %s   Query the Elastic Search index\n" "$(green_bold "elastic-search") "
    printf "  %s   Open the Gogo Shell\n" "$(green_bold "gogo")           "
    printf "  %s   Kill the server\n" "$(green_bold "kill")           "
    printf "  %s   Delete all persisted data\n" "$(green_bold "nuke")           "
    printf "  %s   Start the server\n" "$(green_bold "run")            "
    echo
    printf "%s\n" "$(bold "Code Commands:")"
    printf "  %s   Run baseline in the current folder\n" "$(green_bold "baseline")       "
    printf "  %s   Run buildREST globally\n" "$(green_bold "build-rest")     "
    printf "  %s   List changed modules\n" "$(green_bold "changed-modules")"
    printf "  %s   Deploy the current folder\n" "$(green_bold "deploy")         "
    printf "  %s   Run SF globally\n" "$(green_bold "format-source")  "
    printf "  %s   Output the owner of a path based on CODEOWNERS\n" "$(green_bold "owner")          "
    printf "  %s   Run a Poshi test\n" "$(green_bold "poshi")          "
    printf "  %s   Deploy changed modules\n" "$(green_bold "super-deploy")   "
    echo
    printf "%s\n" "$(bold "Git Commands:")"
    printf "  %s   Forward an existing PR to Brian and close it\n" "$(green_bold "brian")          "
    printf "  %s   Backport commits to other branches\n" "$(green_bold "backport")       "
    printf "  %s   Set the Jira ticket on your local commits\n" "$(green_bold "set-ticket")     "
    printf "  %s   Calculate different Git stats\n" "$(green_bold "stats")          "
    printf "  %s   Sync fork and local copy with upstream\n" "$(green_bold "sync")           "
    printf "  %s   Get all Jira tickets from the output of git log\n" "$(green_bold "tickets")        "
    echo
    printf "%s\n" "$(bold "Jira Commands:")"
    printf "  %s   Open a Jira ticket in the browser\n" "$(green_bold "jira")           "
    echo
    printf "%s\n" "$(bold "GTD Commands:")"
    printf "  %s   Create a todo in Trello\n" "$(green_bold "todo")           "
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo
      printf "  %s\n" "--version, -v"
      printf "    Show version number\n"
      echo

      # :command.usage_environment_variables
      printf "%s\n" "$(bold "Environment Variables:")"

      # :environment_variable.usage
      printf "  %s\n" "DEBUG"
      printf "    Set to true to enable echoing of all the commands being run\n"
      echo

    fi
  }

  # :command.usage
  cliferay_aliases_usage() {
    printf "cliferay aliases - Print aliases script\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay aliases\n"
    printf "  cliferay aliases --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

    fi
  }

  # :command.usage
  cliferay_completions_usage() {
    printf "cliferay completions - Print completions script\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay completions\n"
    printf "  cliferay completions --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

    fi
  }

  # :command.usage
  cliferay_data_folder_usage() {
    printf "cliferay data-folder - Print the data folder\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay data-folder\n"
    printf "  cliferay data-folder --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

    fi
  }

  # :command.usage
  cliferay_init_usage() {
    printf "cliferay init - Initialize cliferay\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay init [OPTIONS]\n"
    printf "  cliferay init --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_flags
      # :flag.usage
      printf "  %s\n" "--email EMAIL (required)"
      printf "    Your Liferay email\n"
      echo

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

    fi
  }

  # :command.usage
  cliferay_update_usage() {
    printf "cliferay update - Update cliferay to the latest version\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay update\n"
    printf "  cliferay update --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

    fi
  }

  # :command.usage
  cliferay_ant_usage() {
    printf "cliferay ant - Run ant\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay ant [--] [...]\n"
    printf "  cliferay ant --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

    fi
  }

  # :command.usage
  cliferay_build_usage() {
    printf "cliferay build - Run ant all\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay build\n"
    printf "  cliferay build --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

    fi
  }

  # :command.usage
  cliferay_gw_usage() {
    printf "cliferay gw - Run gradlew\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay gw [--] [...]\n"
    printf "  cliferay gw --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

    fi
  }

  # :command.usage
  cliferay_ij_usage() {
    printf "cliferay ij - Run liferay-intellij\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay ij\n"
    printf "  cliferay ij --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

    fi
  }

  # :command.usage
  cliferay_morning_usage() {
    printf "cliferay morning - Sync, build, ij, nuke and run\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay morning [OPTIONS]\n"
    printf "  cliferay morning --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_flags
      # :flag.usage
      printf "  %s\n" "--no-nuke"
      printf "    Skip nuke\n"
      echo

      # :flag.usage
      printf "  %s\n" "--force, -f"
      printf "    Force cleanup by running git clean -fdx\n"
      echo

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

    fi
  }

  # :command.usage
  cliferay_curl_usage() {
    printf "cliferay curl - Send HTTP requests to the server\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay curl COMMAND\n"
    printf "  cliferay curl [COMMAND] --help | -h\n"
    echo
    # :command.usage_commands
    printf "%s\n" "$(bold "Commands:")"
    printf "  %s   Run a curl based on a prompt\n" "$(green_bold "ai")          "
    printf "  %s   Create a new instance\n" "$(green_bold "new-instance")"
    printf "  %s   Create a new API Builder API\n" "$(green_bold "new-api")     "
    printf "  %s   Create a new object definition with some entries\n" "$(green_bold "new-object")  "
    printf "  %s   Import a new object entry with batch\n" "$(green_bold "batch-import")"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

    fi
  }

  # :command.usage
  cliferay_curl_ai_usage() {
    printf "cliferay curl ai - Run a curl based on a prompt\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay curl ai PROMPT [OPTIONS]\n"
    printf "  cliferay curl ai --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_flags
      # :flag.usage
      printf "  %s\n" "--generate, -g"
      printf "    Output the command, do not run it\n"
      echo

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

      # :command.usage_args
      printf "%s\n" "$(bold "Arguments:")"

      # :argument.usage
      printf "  %s\n" "PROMPT"
      printf "    The prompt.\n"
      echo

      # :command.usage_environment_variables
      printf "%s\n" "$(bold "Environment Variables:")"

      # :environment_variable.usage
      printf "  %s\n" "OPENAI_API_KEY (required)"
      printf "    Your OpenAI API Key\n"
      echo

      # :command.usage_examples
      printf "%s\n" "$(bold "Examples:")"
      printf "  cliferay curl ai \"create a sample blog posting\"\n"
      printf "  cliferay curl ai \"list all object definitions\"\n"
      echo

    fi
  }

  # :command.usage
  cliferay_curl_new_instance_usage() {
    printf "cliferay curl new-instance - Create a new instance\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay curl new-instance HOST\n"
    printf "  cliferay curl new-instance --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

      # :command.usage_args
      printf "%s\n" "$(bold "Arguments:")"

      # :argument.usage
      printf "  %s\n" "HOST"
      printf "    The virtual host.\n"
      echo

      # :command.usage_examples
      printf "%s\n" "$(bold "Examples:")"
      printf "  cliferay curl new-instance www.able.com\n"
      echo

    fi
  }

  # :command.usage
  cliferay_curl_new_api_usage() {
    printf "cliferay curl new-api - Create a new API Builder API\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay curl new-api\n"
    printf "  cliferay curl new-api --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

    fi
  }

  # :command.usage
  cliferay_curl_new_object_usage() {
    printf "cliferay curl new-object - Create a new object definition with some entries\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay curl new-object\n"
    printf "  cliferay curl new-object --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

    fi
  }

  # :command.usage
  cliferay_curl_batch_import_usage() {
    printf "cliferay curl batch-import - Import a new object entry with batch\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay curl batch-import\n"
    printf "  cliferay curl batch-import --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

    fi
  }

  # :command.usage
  cliferay_db_name_usage() {
    printf "cliferay db-name - Print the database name (lportal)\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay db-name\n"
    printf "  cliferay db-name --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

    fi
  }

  # :command.usage
  cliferay_elastic_search_usage() {
    printf "cliferay elastic-search - Query the Elastic Search index\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay elastic-search\n"
    printf "  cliferay elastic-search --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

    fi
  }

  # :command.usage
  cliferay_gogo_usage() {
    printf "cliferay gogo - Open the Gogo Shell\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay gogo [--] [COMMAND...]\n"
    printf "  cliferay gogo --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

      # :command.usage_args
      printf "%s\n" "$(bold "Arguments:")"

      echo "  COMMAND..."
      printf "    Optional Gogo shell command to run\n"
      echo

      # :command.usage_examples
      printf "%s\n" "$(bold "Examples:")"
      printf "  cliferay gogo\n"
      printf "  cliferay gogo unsatisfied\n"
      printf "  cliferay gogo jaxrs:check\n"
      echo

    fi
  }

  # :command.usage
  cliferay_kill_usage() {
    printf "cliferay kill - Kill the server\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay kill\n"
    printf "  cliferay kill --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

    fi
  }

  # :command.usage
  cliferay_nuke_usage() {
    printf "cliferay nuke - Delete all persisted data\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay nuke\n"
    printf "  cliferay nuke --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

    fi
  }

  # :command.usage
  cliferay_run_usage() {
    printf "cliferay run - Start the server\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay run [COMMAND] [OPTIONS]\n"
    printf "  cliferay run --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_flags

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

      # :command.usage_args
      printf "%s\n" "$(bold "Arguments:")"

      # :argument.usage
      printf "  %s\n" "COMMAND"
      printf "    Tomcat command (jpda by default)\n"
      echo

    fi
  }

  # :command.usage
  cliferay_tomcat_folder_usage() {
    printf "cliferay tomcat-folder - Print the current tomcat folder\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay tomcat-folder\n"
    printf "  cliferay tomcat-folder --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

    fi
  }

  # :command.usage
  cliferay_baseline_usage() {
    printf "cliferay baseline - Run baseline in the current folder\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay baseline\n"
    printf "  cliferay baseline --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

    fi
  }

  # :command.usage
  cliferay_build_rest_usage() {
    printf "cliferay build-rest - Run buildREST globally\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay build-rest\n"
    printf "  cliferay build-rest --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

      # :command.usage_examples
      printf "%s\n" "$(bold "Examples:")"
      printf "  cliferay build-rest\n"
      echo

    fi
  }

  # :command.usage
  cliferay_changed_modules_usage() {
    printf "cliferay changed-modules - List changed modules\n\n"
    printf "Alias: cm\n"
    echo

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay changed-modules [FOLDER] [OPTIONS]\n"
    printf "  cliferay changed-modules --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_flags
      # :flag.usage
      printf "  %s\n" "--branch, -b BRANCH"
      printf "    Branch to compare to\n"
      echo

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

      # :command.usage_args
      printf "%s\n" "$(bold "Arguments:")"

      # :argument.usage
      printf "  %s\n" "FOLDER"
      printf "    The root folder to compare.\n"
      echo

    fi
  }

  # :command.usage
  cliferay_deploy_usage() {
    printf "cliferay deploy - Deploy the current folder\n\n"
    printf "Alias: d\n"
    echo

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay deploy\n"
    printf "  cliferay deploy --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

    fi
  }

  # :command.usage
  cliferay_folder_usage() {
    printf "cliferay folder - Print the current Liferay home folder\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay folder\n"
    printf "  cliferay folder --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

    fi
  }

  # :command.usage
  cliferay_format_source_usage() {
    printf "cliferay format-source - Run SF globally\n\n"
    printf "Alias: sf\n"
    echo

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay format-source\n"
    printf "  cliferay format-source --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

    fi
  }

  # :command.usage
  cliferay_home_usage() {
    printf "cliferay home - Print the default Liferay home folder\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay home\n"
    printf "  cliferay home --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

      # :command.usage_environment_variables
      printf "%s\n" "$(bold "Environment Variables:")"

      # :environment_variable.usage
      printf "  %s\n" "LIFERAY_HOME (required)"
      printf "    Location of your main liferay-portal clone\n"
      echo

    fi
  }

  # :command.usage
  cliferay_owner_usage() {
    printf "cliferay owner - Output the owner of a path based on CODEOWNERS\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay owner [PATH]\n"
    printf "  cliferay owner --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

      # :command.usage_args
      printf "%s\n" "$(bold "Arguments:")"

      # :argument.usage
      printf "  %s\n" "PATH"
      printf "    The path to check\n"
      printf "    %s\n" "Default: ."
      echo

      # :command.usage_examples
      printf "%s\n" "$(bold "Examples:")"
      printf "  cliferay owner modules/apps/headless/headless-builder\n"
      echo

    fi
  }

  # :command.usage
  cliferay_poshi_usage() {
    printf "cliferay poshi - Run a Poshi test\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay poshi TEST\n"
    printf "  cliferay poshi --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

      # :command.usage_args
      printf "%s\n" "$(bold "Arguments:")"

      # :argument.usage
      printf "  %s\n" "TEST"
      printf "    The test to run.\n"
      echo

      # :command.usage_examples
      printf "%s\n" "$(bold "Examples:")"
      printf "  cliferay poshi GeneratePathStructureForEndpoints#CanValidatePathInAPIEndpoint\n"
      echo

    fi
  }

  # :command.usage
  cliferay_super_deploy_usage() {
    printf "cliferay super-deploy - Deploy changed modules\n\n"
    printf "Alias: sd\n"
    echo

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay super-deploy [FOLDER] [OPTIONS]\n"
    printf "  cliferay super-deploy --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_flags
      # :flag.usage
      printf "  %s\n" "--branch, -b BRANCH"
      printf "    Branch to compare to\n"
      echo

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

      # :command.usage_args
      printf "%s\n" "$(bold "Arguments:")"

      # :argument.usage
      printf "  %s\n" "FOLDER"
      printf "    The root folder to compare.\n"
      echo

    fi
  }

  # :command.usage
  cliferay_brian_usage() {
    printf "cliferay brian - Forward an existing PR to Brian and close it\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay brian PR\n"
    printf "  cliferay brian --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

      # :command.usage_args
      printf "%s\n" "$(bold "Arguments:")"

      # :argument.usage
      printf "  %s\n" "PR"
      printf "    Link to the GitHub PR.\n"
      echo

      # :command.usage_examples
      printf "%s\n" "$(bold "Examples:")"
      printf "  cliferay brian https://github.com/liferay-headless/liferay-portal/pull/1433\n"
      echo

    fi
  }

  # :command.usage
  cliferay_backport_usage() {
    printf "cliferay backport - Backport commits to other branches\n\n"
    printf "Alias: b\n"
    echo

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay backport TEXT [OPTIONS]\n"
    printf "  cliferay backport --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_flags
      # :flag.usage
      printf "  %s\n" "--branch, -b BRANCH"
      printf "    Source branch\n"
      echo

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

      # :command.usage_args
      printf "%s\n" "$(bold "Arguments:")"

      # :argument.usage
      printf "  %s\n" "TEXT"
      printf "    Text to filter commits by (LPD-1234).\n"
      echo

    fi
  }

  # :command.usage
  cliferay_set_ticket_usage() {
    printf "cliferay set-ticket - Set the Jira ticket on your local commits\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay set-ticket TICKET [OPTIONS]\n"
    printf "  cliferay set-ticket --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_flags
      # :flag.usage
      printf "  %s\n" "--branch, -b BRANCH"
      printf "    Source branch\n"
      echo

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

      # :command.usage_args
      printf "%s\n" "$(bold "Arguments:")"

      # :argument.usage
      printf "  %s\n" "TICKET"
      printf "    The ticket reference.\n"
      echo

      # :command.usage_examples
      printf "%s\n" "$(bold "Examples:")"
      printf "  cliferay set-ticket LPD-XXXX\n"
      echo

    fi
  }

  # :command.usage
  cliferay_stats_usage() {
    printf "cliferay stats - Calculate different Git stats\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay stats COMMAND\n"
    printf "  cliferay stats [COMMAND] --help | -h\n"
    echo
    # :command.usage_commands
    printf "%s\n" "$(bold "Commands:")"
    printf "  %s   Get info about users\n" "$(green_bold "users")           "
    printf "  %s   Shows commit count per year\n" "$(green_bold "years")           "
    printf "  %s   Shows commit ranking\n" "$(green_bold "ranking")         "
    printf "  %s   Shows tickets worked on based on commits\n" "$(green_bold "tickets")         "
    printf "  %s   Print the commits for the user\n" "$(green_bold "commits")         "
    printf "  %s   Writes a review based on git and jira stats\n" "$(green_bold "review")          "
    printf "  %s   Shows tickets ever assigned to the user\n" "$(green_bold "assigned")        "
    printf "  %s   Shows tickets grouped by folder\n" "$(green_bold "headless-summary")"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

    fi
  }

  # :command.usage
  cliferay_stats_users_usage() {
    printf "cliferay stats users - Get info about users\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay stats users COMMAND\n"
    printf "  cliferay stats users [COMMAND] --help | -h\n"
    echo
    # :command.usage_commands
    printf "%s\n" "$(bold "Commands:")"
    printf "  %s   Shows the jira id\n" "$(green_bold "jira")  "
    printf "  %s   Shows the user git emails\n" "$(green_bold "emails")"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

    fi
  }

  # :command.usage
  cliferay_stats_users_jira_usage() {
    printf "cliferay stats users jira - Shows the jira id\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay stats users jira USER\n"
    printf "  cliferay stats users jira --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

      # :command.usage_args
      printf "%s\n" "$(bold "Arguments:")"

      # :argument.usage
      printf "  %s\n" "USER"
      printf "    The user handle.\n"
      echo

      # :command.usage_examples
      printf "%s\n" "$(bold "Examples:")"
      printf "  cliferay stats users jira alejandro.tardin\n"
      echo

    fi
  }

  # :command.usage
  cliferay_stats_users_emails_usage() {
    printf "cliferay stats users emails - Shows the user git emails\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay stats users emails USER\n"
    printf "  cliferay stats users emails --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

      # :command.usage_args
      printf "%s\n" "$(bold "Arguments:")"

      # :argument.usage
      printf "  %s\n" "USER"
      printf "    The user handle.\n"
      echo

      # :command.usage_examples
      printf "%s\n" "$(bold "Examples:")"
      printf "  cliferay stats users emails alejandro.tardin\n"
      echo

    fi
  }

  # :command.usage
  cliferay_stats_years_usage() {
    printf "cliferay stats years - Shows commit count per year\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay stats years [USER]\n"
    printf "  cliferay stats years --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

      # :command.usage_args
      printf "%s\n" "$(bold "Arguments:")"

      # :argument.usage
      printf "  %s\n" "USER"
      printf "    The user.\n"
      echo

      # :command.usage_examples
      printf "%s\n" "$(bold "Examples:")"
      printf "  cliferay stats years alejandro.tardin\n"
      echo

    fi
  }

  # :command.usage
  cliferay_stats_ranking_usage() {
    printf "cliferay stats ranking - Shows commit ranking\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay stats ranking [EMAILS...]\n"
    printf "  cliferay stats ranking --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

      # :command.usage_args
      printf "%s\n" "$(bold "Arguments:")"

      # :argument.usage
      printf "  %s\n" "EMAILS..."
      printf "    The emails of the commit authors.\n"
      echo

      # :command.usage_examples
      printf "%s\n" "$(bold "Examples:")"
      printf "  cliferay stats ranking alejandro.tardin@liferay.com\n"
      echo

    fi
  }

  # :command.usage
  cliferay_stats_tickets_usage() {
    printf "cliferay stats tickets - Shows tickets worked on based on commits\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay stats tickets [USER]\n"
    printf "  cliferay stats tickets --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

      # :command.usage_args
      printf "%s\n" "$(bold "Arguments:")"

      # :argument.usage
      printf "  %s\n" "USER"
      printf "    The user.\n"
      echo

      # :command.usage_examples
      printf "%s\n" "$(bold "Examples:")"
      printf "  cliferay stats tickets alejandro.tardin\n"
      echo

    fi
  }

  # :command.usage
  cliferay_stats_commits_usage() {
    printf "cliferay stats commits - Print the commits for the user\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay stats commits [USER]\n"
    printf "  cliferay stats commits --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

      # :command.usage_args
      printf "%s\n" "$(bold "Arguments:")"

      # :argument.usage
      printf "  %s\n" "USER"
      printf "    The user.\n"
      echo

      # :command.usage_examples
      printf "%s\n" "$(bold "Examples:")"
      printf "  cliferay stats commits alejandro.tardin@liferay.com\n"
      echo

    fi
  }

  # :command.usage
  cliferay_stats_review_usage() {
    printf "cliferay stats review - Writes a review based on git and jira stats\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay stats review [USER]\n"
    printf "  cliferay stats review --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

      # :command.usage_args
      printf "%s\n" "$(bold "Arguments:")"

      # :argument.usage
      printf "  %s\n" "USER"
      printf "    The user to be reviewed.\n"
      echo

      # :command.usage_examples
      printf "%s\n" "$(bold "Examples:")"
      printf "  cliferay stats review alejandro.tardin@liferay.com\n"
      echo

    fi
  }

  # :command.usage
  cliferay_stats_assigned_usage() {
    printf "cliferay stats assigned - Shows tickets ever assigned to the user\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay stats assigned [USER]\n"
    printf "  cliferay stats assigned --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

      # :command.usage_args
      printf "%s\n" "$(bold "Arguments:")"

      # :argument.usage
      printf "  %s\n" "USER"
      printf "    The user.\n"
      echo

      # :command.usage_examples
      printf "%s\n" "$(bold "Examples:")"
      printf "  cliferay stats assigned alejandro.tardin\n"
      echo

    fi
  }

  # :command.usage
  cliferay_stats_headless_summary_usage() {
    printf "cliferay stats headless-summary - Shows tickets grouped by folder\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay stats headless-summary USER\n"
    printf "  cliferay stats headless-summary --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

      # :command.usage_args
      printf "%s\n" "$(bold "Arguments:")"

      # :argument.usage
      printf "  %s\n" "USER"
      printf "    The user.\n"
      echo

      # :command.usage_examples
      printf "%s\n" "$(bold "Examples:")"
      printf "  cliferay stats headless-summary alejandro.tardin\n"
      echo

    fi
  }

  # :command.usage
  cliferay_sync_usage() {
    printf "cliferay sync - Sync fork and local copy with upstream\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay sync\n"
    printf "  cliferay sync --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

    fi
  }

  # :command.usage
  cliferay_tickets_usage() {
    printf "cliferay tickets - Get all Jira tickets from the output of git log\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay tickets\n"
    printf "  cliferay tickets --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

      # :command.usage_examples
      printf "%s\n" "$(bold "Examples:")"
      printf "  git log | cliferay tickets\n"
      echo

    fi
  }

  # :command.usage
  cliferay_jira_usage() {
    printf "cliferay jira - Open a Jira ticket in the browser\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay jira [TICKET]\n"
    printf "  cliferay jira --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

      # :command.usage_args
      printf "%s\n" "$(bold "Arguments:")"

      # :argument.usage
      printf "  %s\n" "TICKET"
      printf "    The ticket reference (LPD-1234). If not present it will be extracted from\n    the git branch name.\n"
      echo

    fi
  }

  # :command.usage
  cliferay_todo_usage() {
    printf "cliferay todo - Create a todo in Trello\n\n"

    printf "%s\n" "$(bold "Usage:")"
    printf "  cliferay todo [--] TITLE...\n"
    printf "  cliferay todo --help | -h\n"
    echo

    # :command.long_usage
    if [[ -n "$long_usage" ]]; then
      printf "%s\n" "$(bold "Options:")"

      # :command.usage_fixed_flags
      printf "  %s\n" "--help, -h"
      printf "    Show this help\n"
      echo

      # :command.usage_args
      printf "%s\n" "$(bold "Arguments:")"

      echo "  TITLE..."
      printf "    The todo title\n"
      echo

      # :command.usage_environment_variables
      printf "%s\n" "$(bold "Environment Variables:")"

      # :environment_variable.usage
      printf "  %s\n" "TRELLO_API_KEY (required)"
      printf "    Your Trello API Key\n    https://developer.atlassian.com/cloud/trello/guides/rest-api/authorization\n"
      echo

      # :environment_variable.usage
      printf "  %s\n" "TRELLO_TOKEN (required)"
      printf "    Your Trello Token\n    https://trello.com/1/authorize?expiration=never&scope=read,write,account&response_type=token&key=TRELLO_API_KEY\n"
      echo

      # :environment_variable.usage
      printf "  %s\n" "TRELLO_LIST_ID (required)"
      printf "    Your Trello List Id\n    https://community.atlassian.com/forums/Trello-questions/How-do-I-find-the-LIST-ID/qaq-p/2272862\n"
      echo

      # :command.usage_examples
      printf "%s\n" "$(bold "Examples:")"
      printf "  cliferay todo Complete 100%% of the milestone\n"
      printf "  cliferay todo Review PR http://gihub.com/...\n"
      echo

    fi
  }

  # :command.normalize_input
  # :command.normalize_input_function
  normalize_input() {
    local arg passthru flags
    passthru=false

    while [[ $# -gt 0 ]]; do
      arg="$1"
      if [[ $passthru == true ]]; then
        input+=("$arg")
      elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
        input+=("${BASH_REMATCH[1]}")
        input+=("${BASH_REMATCH[2]}")
      elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
        input+=("${BASH_REMATCH[1]}")
        input+=("${BASH_REMATCH[2]}")
      elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
        flags="${BASH_REMATCH[1]}"
        for ((i = 0; i < ${#flags}; i++)); do
          input+=("-${flags:i:1}")
        done
      elif [[ "$arg" == "--" ]]; then
        passthru=true
        input+=("$arg")
      else
        input+=("$arg")
      fi

      shift
    done
  }

  # :command.inspect_args
  inspect_args() {
    if ((${#args[@]})); then
      readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
      echo args:
      for k in "${sorted_keys[@]}"; do
        echo "- \${args[$k]} = ${args[$k]}"
      done
    else
      echo args: none
    fi

    if ((${#other_args[@]})); then
      echo
      echo other_args:
      echo "- \${other_args[*]} = ${other_args[*]}"
      for i in "${!other_args[@]}"; do
        echo "- \${other_args[$i]} = ${other_args[$i]}"
      done
    fi

    if ((${#deps[@]})); then
      readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
      echo
      echo deps:
      for k in "${sorted_keys[@]}"; do
        echo "- \${deps[$k]} = ${deps[$k]}"
      done
    fi

    if ((${#env_var_names[@]})); then
      readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
      echo
      echo "environment variables:"
      for k in "${sorted_names[@]}"; do
        echo "- \$$k = ${!k:-}"
      done
    fi
  }

  # :command.user_lib
  # src/lib/colors.sh

  enable_auto_colors() {
    if [[ -z ${NO_COLOR+x} && ! -t 1 ]]; then
      NO_COLOR=1
    fi
  }

  print_in_color() {
    local color="$1"
    shift
    if [[ "${NO_COLOR:-}" == "" ]]; then
      printf "$color%b\e[0m\n" "$*"
    else
      printf "%b\n" "$*"
    fi
  }

  red() { print_in_color "\e[31m" "$*"; }
  green() { print_in_color "\e[32m" "$*"; }
  yellow() { print_in_color "\e[33m" "$*"; }
  blue() { print_in_color "\e[34m" "$*"; }
  magenta() { print_in_color "\e[35m" "$*"; }
  cyan() { print_in_color "\e[36m" "$*"; }
  black() { print_in_color "\e[30m" "$*"; }
  white() { print_in_color "\e[37m" "$*"; }

  bold() { print_in_color "\e[1m" "$*"; }
  underlined() { print_in_color "\e[4m" "$*"; }

  red_bold() { print_in_color "\e[1;31m" "$*"; }
  green_bold() { print_in_color "\e[1;32m" "$*"; }
  yellow_bold() { print_in_color "\e[1;33m" "$*"; }
  blue_bold() { print_in_color "\e[1;34m" "$*"; }
  magenta_bold() { print_in_color "\e[1;35m" "$*"; }
  cyan_bold() { print_in_color "\e[1;36m" "$*"; }
  black_bold() { print_in_color "\e[1;30m" "$*"; }
  white_bold() { print_in_color "\e[1;37m" "$*"; }

  red_underlined() { print_in_color "\e[4;31m" "$*"; }
  green_underlined() { print_in_color "\e[4;32m" "$*"; }
  yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
  blue_underlined() { print_in_color "\e[4;34m" "$*"; }
  magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
  cyan_underlined() { print_in_color "\e[4;36m" "$*"; }
  black_underlined() { print_in_color "\e[4;30m" "$*"; }
  white_underlined() { print_in_color "\e[4;37m" "$*"; }

  # src/lib/functions.sh
  function get-module() {
  	while read line
  	do
  		if test -f $line/bnd.bnd; then
  			echo "$line";
  		elif [ "$line" != "." ]; then
  			(dirname $line | get-module)
  		fi
  	done
  }

  function run-stdin() {
  	set +e
  	while read line
  	do
  		echo "" | (cd $(cliferay folder)/$line; $*)
  	done
  	set -e
  }

  function liferay-curl() {
  	curl --no-progress-meter -u 'test@liferay.com:test' "$@" | jq
  }

  function get_current_period() {
      current_year=$(date '+%Y')
      month=$(date '+%m')

      if [ -n "$Q" ]; then
          current_year=$(echo "$Q" | cut -d'-' -f1)
          quarter=$(echo "$Q" | cut -d'-' -f2 | tr -d 'q')
          case $quarter in
              1)
                  since="${current_year}-01-01"
                  until="${current_year}-04-01"
                  ;;
              2)
                  since="${current_year}-04-01"
                  until="${current_year}-07-01"
                  ;;
              3)
                  since="${current_year}-07-01"
                  until="${current_year}-10-01"
                  ;;
              4)
                  since="${current_year}-10-01"
                  until="$(($current_year + 1))-01-01"
                  ;;
              *)
                  echo "Invalid quarter specified. Use format yyyy-qx (e.g., 2023-q1)."
                  return 1
                  ;;
          esac
      else
          since="2000-01-01"
          until="${current_year}-12-31"
      fi
  }

  function get_git_log_period() {
      get_current_period
      echo "--since=\"$since\" --until=\"$until\""
  }

  # src/lib/send_completions.sh
  send_completions() {
    echo $'# cliferay completion                                      -*- shell-script -*-'
    echo $''
    echo $'# This bash completions script was generated by'
    echo $'# completely (https://github.com/dannyben/completely)'
    echo $'# Modifying it manually is not recommended'
    echo $''
    echo $'_cliferay_completions_filter() {'
    echo $'  local words="$1"'
    echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
    echo $'  local result=()'
    echo $''
    echo $'  if [[ "${cur:0:1}" == "-" ]]; then'
    echo $'    echo "$words"'
    echo $''
    echo $'  else'
    echo $'    for word in $words; do'
    echo $'      [[ "${word:0:1}" != "-" ]] && result+=("$word")'
    echo $'    done'
    echo $''
    echo $'    echo "${result[*]}"'
    echo $''
    echo $'  fi'
    echo $'}'
    echo $''
    echo $'_cliferay_completions() {'
    echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
    echo $'  local compwords=("${COMP_WORDS[@]:1:$COMP_CWORD-1}")'
    echo $'  local compline="${compwords[*]}"'
    echo $''
    echo $'  case "$compline" in'
    echo $'    \'stats headless-summary\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'stats users emails\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'curl batch-import\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'curl new-instance\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'stats users jira\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'changed-modules\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--branch --help -b -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'curl new-object\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'elastic-search\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'stats assigned\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'stats ranking\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'stats tickets\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'stats commits\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'format-source\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'curl new-api\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'stats review\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'super-deploy\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--branch --help -b -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'stats years\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'stats users\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h emails jira")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'build-rest\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'set-ticket\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--branch --help -b -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'baseline\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'backport\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--branch --help -b -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'curl ai\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--generate --help -g -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'morning\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--force --help --no-nuke -f -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'tickets\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'deploy\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'update\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'build\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'owner\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'poshi\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'brian\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'stats\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h assigned commits headless-summary ranking review tickets users years")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'sync\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'jira\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'todo\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'nuke\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'kill\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'gogo\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h diag jaxrs:check scr:list unsatisfied")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'curl\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h ai batch-import new-api new-instance new-object")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'init\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--email --help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'run\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'ant\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'sd\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--branch --help -b -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'sf\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'cm\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--branch --help -b -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'ij\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'gw\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'b\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--branch --help -b -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    \'d\'*)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'    *)'
    echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help --version -h -v ant b backport baseline brian build build-rest changed-modules cm curl d deploy elastic-search format-source gogo gw ij init jira kill morning nuke owner poshi run sd set-ticket sf stats super-deploy sync tickets todo update")" -- "$cur")'
    echo $'      ;;'
    echo $''
    echo $'  esac'
    echo $'} &&'
    echo $'  complete -F _cliferay_completions cliferay'
    echo $''
    echo $'# ex: filetype=sh'
  }

  # :command.command_functions
  # :command.function
  cliferay_aliases_command() {

    # src/commands/aliases.sh
    echo 'alias gw="cliferay gw"'
    echo 'alias cdl="cd $(cliferay folder)"'
    echo 'alias c="cliferay"'
  }

  # :command.function
  cliferay_completions_command() {

    # src/commands/completions.sh
    send_completions
  }

  # :command.function
  cliferay_data_folder_command() {

    # src/commands/data-folder.sh
    echo $(dirname "$(readlink -f "$0")")/../.data
  }

  # :command.function
  cliferay_init_command() {

    # src/commands/init.sh
    #gh auth login --hostname github.com
    jira init --force --installation cloud --server "https://liferay.atlassian.net" --project LPD --board None --login "${args["--email"]}"

  }

  # :command.function
  cliferay_update_command() {

    # src/commands/update.sh
    cd "$(dirname "$0")"

    git pull
  }

  # :command.function
  cliferay_ant_command() {

    # src/commands/ant.sh
    ANT_OPTS=-Xmx8192m ant ${other_args[*]}
  }

  # :command.function
  cliferay_build_command() {

    # src/commands/build.sh
    cd $(cliferay folder)
    cliferay ant setup-profile-dxp
    cliferay ant all
    cd modules/test/playwright
    npm install

  }

  # :command.function
  cliferay_gw_command() {

    # src/commands/gw.sh
    $(cliferay folder)/gradlew ${other_args[*]}
  }

  # :command.function
  cliferay_ij_command() {

    # src/commands/ij.sh
    cd $(cliferay folder)
    if [ ! -d "../liferay-intellij" ]; then
        gh repo clone holatuwol/liferay-intellij "../liferay-intellij"
    fi
    (cd ../liferay-intellij; git pull)
    ../liferay-intellij/intellij

  }

  # :command.function
  cliferay_morning_command() {

    # src/commands/morning.sh
    cliferay sync
    if [[ ${args["--force"]} = 1 ]]; then
        cd $(cliferay folder) && git clean -fdx
    fi
    cliferay build
    cliferay ij
    if [[ ${args["--no-nuke"]} != 1 ]]; then
        cliferay nuke
    fi
    cliferay run

  }

  # :command.function
  cliferay_curl_ai_command() {

    # src/commands/curl/ai.sh
    OPENAPI_FILE=$(mktemp)
    OPENAI_REQUEST_FILE=$(mktemp)

    jq -n --arg input "${args[prompt]}" --arg openapis "$(liferay-curl -s "http://localhost:8080/o/openapi")" \
      '{
        "model": "gpt-4o",
        "messages": [
          {"role": "system", "content": "You are a helpful assistant that will select the most relevant OpenAPI URL based on the prompt. Here are the available OpenAPIs:\n\n\($openapis)"},
          {"role": "user", "content": "\($input)"}
        ],
        "tools": [
          {
            "type": "function",
            "function": {
              "strict": true,
              "name": "select_openapi",
              "description": "Return the OpenAPI URL.",
              "parameters": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "The OpenAPI URL."
                  }
                },
                "additionalProperties": false,
                "required": ["url"]
              }
            }
          }
        ],
        "tool_choice": {"type": "function", "function": {"name": "select_openapi"}}
    }' >$OPENAI_REQUEST_FILE

    OPENAPI_URL=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
      -H "Authorization: Bearer $OPENAI_API_KEY" \
      -H "Content-Type: application/json" \
      -d @$OPENAI_REQUEST_FILE | jq -r '.choices[0].message.tool_calls[0].function.arguments' | jq -r '.url')

    curl -s "$OPENAPI_URL" -u test@liferay.com:test >$OPENAPI_FILE

    jq -n --arg input "${args[prompt]}" --rawfile openapi $OPENAPI_FILE \
      '{
        "model": "gpt-4o",
        "messages": [
          {"role": "system", "content": "You are a helpful assistant that transforms user instructions into curl commands based on the given OpenAPI specification."},
          {"role": "system", "content": "Here is the OpenAPI specification:\n\n\($openapi)"},
          {"role": "system", "content": "If a site id or scope key is needed use 20117"},
          {"role": "system", "content": "For object definition and field labels and plural labels use a json like: en_US: ..."},
          {"role": "system", "content": "To create object definitions always send the status with a json object code: 0"},
          {"role": "system", "content": "For object definition panelCategoryKey use control_panel.object unless told otherwise"},
          {"role": "system", "content": "For object definition scope use company unless told otherwise"},
          {"role": "system", "content": "For object definitions always add at least one field"},
          {"role": "system", "content": "Object definition names must start with uppercase"},
          {"role": "system", "content": "Use this credentials -u test@liferay.com:test"},
          {"role": "user", "content": "\($input)"}
        ],
        "tools": [
          {
            "type": "function",
            "function": {
              "strict": true,
              "name": "generate_curl_command",
              "description": "Generate a curl command based on user input and OpenAPI specification.",
              "parameters": {
                "type": "object",
                "properties": {
                  "curl_command": {
                    "type": "string",
                    "description": "The generated curl command."
                  }
                },
                "additionalProperties": false,
                "required": ["curl_command"]
              }
            }
          }
        ],
        "tool_choice": {"type": "function", "function": {"name": "generate_curl_command"}}
    }' >$OPENAI_REQUEST_FILE

    CURL_COMMAND=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
      -H "Authorization: Bearer $OPENAI_API_KEY" \
      -H "Content-Type: application/json" \
      -d @$OPENAI_REQUEST_FILE | jq -r '.choices[0].message.tool_calls[0].function.arguments' | jq -r '.curl_command')

    if [[ ${args[--generate]} -eq 1 ]]; then
      echo "$CURL_COMMAND"
    else
      eval "$CURL_COMMAND"
    fi
  }

  # :command.function
  cliferay_curl_new_instance_command() {

    # src/commands/curl/new-instance.sh
    HOST=${args["host"]}
    liferay-curl -X 'POST' \
      'http://localhost:8080/o/headless-portal-instances/v1.0/portal-instances' \
      -H 'accept: application/json' \
      -H 'Content-Type: application/json' \
      -d '{
      "domain": "liferay.com",
      "portalInstanceId": "'$HOST'",
      "virtualHost": "'$HOST'"
    }'
  }

  # :command.function
  cliferay_curl_new_api_command() {

    # src/commands/curl/new-api.sh
    liferay-curl -X "DELETE" "http://localhost:8080/o/headless-builder/applications/by-external-reference-code/headless-builder-test"
    liferay-curl -X "POST" "http://localhost:8080/o/headless-builder/applications" \
         -H 'Content-Type: application/json' \
         -d $'{
      "baseURL": "headless-builder-test",
      "title": "API Builder Test",
      "externalReferenceCode": "headless-builder-test",
      "apiApplicationToAPIEndpoints": [
        {
          "path": "/test1",
          "scope": "company",
          "externalReferenceCode": "test-endpoint-1",
          "name": "Test 1",
          "description": "description",
          "httpMethod": "get"
        },
        {
          "path": "/test2",
          "scope": "company",
          "externalReferenceCode": "test-endpoint-2",
          "name": "Test 2",
          "description": "description",
          "httpMethod": "get"
        }
      ],
      "applicationStatus": "published",
      "apiApplicationToAPISchemas": [
        {
          "externalReferenceCode": "test-schema",
          "mainObjectDefinitionERC": "L_API_ENDPOINT",
          "description": "description",
          "name": "Test Schema",
          "apiSchemaToAPIProperties": [
            {
              "objectFieldERC": "PATH",
              "name": "path",
              "description": "description"
            }
          ]
        }
      ]
    }'
    liferay-curl -X "PUT" "http://localhost:8080/o/headless-builder/schemas/by-external-reference-code/test-schema/responseAPISchemaToAPIEndpoints/test-endpoint-1"
    liferay-curl -X "PUT" "http://localhost:8080/o/headless-builder/schemas/by-external-reference-code/test-schema/responseAPISchemaToAPIEndpoints/test-endpoint-2"
    liferay-curl "http://localhost:8080/o/c/headless-builder-test/test1"
  }

  # :command.function
  cliferay_curl_new_object_command() {

    # src/commands/curl/new-object.sh
    JSON=$(
      liferay-curl -X "PUT" "http://localhost:8080/o/object-admin/v1.0/object-definitions/by-external-reference-code/University" \
         -H 'Content-Type: application/json' \
         -d $'{
            "active": true,
            "status": {
              "code": 0
            },
            "objectFields": [
              {
                "DBType": "String",
                "indexed": true,
                "indexedLanguageId": "",
                "externalReferenceCode": "university-name",
                "listTypeDefinitionId": 0,
                "label": {
                  "en_US": "University name"
                },
                "type": "String",
                "required": true,
                "system": false,
                "name": "universityName",
                "indexedAsKeyword": false
              }
            ],
            "objectValidationRules": [
              {
                "engineLabel": "Expression Builder",
                "active": true,
                "outputType": "fullValidation",
                "script": "universityName != \\"Harvard\\"",
                "externalReferenceCode": "f78318aa-e87f-06c2-821c-0275455fcd1f",
                "objectDefinitionExternalReferenceCode": "University",
                "system": false,
                "engine": "ddm",
                "objectValidationRuleSettings": [],
                "name": {
                    "en_US": "Test"
                },
                "errorLabel": {
                    "en_US": "We do not like Harvard"
                }
              }
            ],
            "panelCategoryKey": "control_panel.object",
            "pluralLabel": {
              "en-US": "Universities"
            },
            "portlet": true,
            "scope": "company",
            "label": {
              "en-US": "University"
            },
            "externalReferenceCode": "University",
            "name": "University"
          }'
    )

    echo $JSON | jq

    if [[ $(echo $JSON | jq '.status.code') != 0 ]]; then
      liferay-curl -X "POST" "http://localhost:8080/o/object-admin/v1.0/object-definitions/$(echo $JSON | jq '.id')/publish"
    fi

    liferay-curl -X "PUT" "http://localhost:8080/o/c/universities/by-external-reference-code/Oxford" \
         -H 'Content-Type: application/json' \
         -d $'{
        "universityName": "Oxford"
      }'

    liferay-curl -X "PUT" "http://localhost:8080/o/c/universities/by-external-reference-code/Cambridge" \
         -H 'Content-Type: application/json' \
         -d $'{
        "universityName": "Cambridge"
      }'
  }

  # :command.function
  cliferay_curl_batch_import_command() {

    # src/commands/curl/batch-import.sh
    liferay-curl -X POST -H "Content-Type: application/json" -d '[{"universityName": "UAM"}]' http://localhost:8080/o/c/universities/batch | jq -r '.id' | xargs -I {} curl -X GET -u test@liferay.com:test -H "Content-Type: application/json" http://localhost:8080/o/headless-batch-engine/v1.0/import-task/\{\} | jq
  }

  # :command.function
  cliferay_db_name_command() {

    # src/commands/db-name.sh
    [[ "$(cliferay folder)" =~ .*-ee$ ]] && echo "lportalee" || echo "lportal"
  }

  # :command.function
  cliferay_elastic_search_command() {

    # src/commands/elastic-search.sh
    liferay-curl "http://localhost:9201/*/_search?pretty=true&size=10000"
  }

  # :command.function
  cliferay_gogo_command() {

    # src/commands/gogo.sh
    if [ ${#other_args[@]} -eq 0 ]; then
        telnet localhost 11311
    else
    expect <<EOF
spawn telnet localhost 11311
expect "g! "
send "${other_args[*]}\r"
expect "g! "
send "disconnect\r"
expect "Disconnect from console? (y/n; default=y)"
send "y\r"
expect eof
EOF
    fi

  }

  # :command.function
  cliferay_kill_command() {

    # src/commands/kill.sh
    pgrep -f tomcat | xargs kill -9
  }

  # :command.function
  cliferay_nuke_command() {

    # src/commands/nuke.sh
    cd $(cliferay folder)
    rm -rf ../bundles/elasticsearch7 ../bundles/data ../bundles/osgi/war ../bundles/osgi/state ../bundles2 $(cliferay tomcat-folder)/work/Catalina
    echo "drop database IF EXISTS $(cliferay db-name); create database $(cliferay db-name) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin" | mysql -uroot -proot
  }

  # :command.function
  cliferay_run_command() {

    # src/commands/run.sh
    function generate-configuration() {
    echo "
    # This file was created by cliferay $(cliferay --version).
    # Please do not alter it.
    # Put your custom properties in the portal-custom.properties file instead.

    admin.email.from.address=test@liferay.com
    admin.email.from.name=Test Test
    default.admin.email.address.prefix=test

    captcha.enforce.disabled=true

    company.security.strangers.verify=false
    company.default.locale=en_US
    company.default.time.zone=UTC
    company.default.web.id=liferay.com

    jdbc.default.driverClassName=com.mysql.cj.jdbc.Driver
    jdbc.default.password=root
    jdbc.default.url=jdbc:mysql://localhost/$(cliferay db-name)?characterEncoding=UTF-8&dontTrackOpenResources=true&holdResultsOpenOverStatementClose=true&serverTimezone=GMT&useFastDateParsing=false&useUnicode=true
    jdbc.default.username=root

    liferay.home=$1

    setup.wizard.enabled=false
    terms.of.use.required=false
    passwords.default.policy.change.required=false
    users.reminder.queries.required=false
    users.reminder.queries.enabled=false
    enterprise.product.notification.enabled=false

    feature.flag.ui.visible[dev]=true

    module.framework.properties.osgi.console=11311

    cluster.link.enabled=$([[ ${args[--clustered]} -eq 1 ]] && echo "true" || echo "false")

    include-and-override=\${liferay.home}/portal-custom.properties
    " > $1/portal-ext.properties
    if [ ! -f "$1/portal-custom.properties" ]; then
        echo "# Override your config here, don't touch portal-ext.properties" > $1/portal-custom.properties
    fi
    mkdir -p $1/osgi/configs
    echo 'maxChallenges=I"-1"' > $1/osgi/configs/com.liferay.captcha.configuration.CaptchaConfiguration.config
    }

    BUNDLES=$(realpath $(cliferay folder)/../bundles)

    generate-configuration $BUNDLES

    if [[ ${args[--clustered]} -eq 1 ]]; then
      BUNDLES2="${BUNDLES}2"
      rm -rf $BUNDLES2 && cp -r $BUNDLES $BUNDLES2
      generate-configuration $BUNDLES2
      # TODO the file does not exist: sed -i 's/^[ \t]*//' $BUNDLES2/osgi/configs/com.liferay.portal.search.elasticsearch7.configuration.ElasticsearchConfiguration.config
      sed -i -e 's/8080/9080/g' -e 's/8005/9005/g' -e 's/8443/9443/g' "$(cliferay tomcat-folder | sed 's|/bundles/|/bundles2/|')/conf/server.xml"
    fi

    $(cliferay tomcat-folder)/bin/catalina.sh ${args["command"]:-jpda} run
    # TODO Run the second instance too
  }

  # :command.function
  cliferay_tomcat_folder_command() {

    # src/commands/tomcat-folder.sh
    cd $(cliferay folder)/../bundles
    ls -d "$PWD/"** | grep tomcat | tail -n 1
  }

  # :command.function
  cliferay_baseline_command() {

    # src/commands/baseline.sh
    if [[ "$PWD" = */portal-kernel || "$PWD" = */portal-impl ]]; then
        cliferay ant -Dbaseline.jar.report.level=persist clean jar
    elif ! [[ "$PWD" = */*-test ]]; then
        cliferay gw baseline
    fi
  }

  # :command.function
  cliferay_build_rest_command() {

    # src/commands/build-rest.sh
    cd $(cliferay folder)/modules/apps && cliferay gw buildREST
    cd $(cliferay folder)/modules/dxp/apps && cliferay gw buildREST
    cd $(cliferay folder)/modules/util/portal-tools-rest-builder-test-impl && cliferay gw buildREST
  }

  # :command.function
  cliferay_changed_modules_command() {

    # src/commands/changed-modules.sh
    FOLDER=$(realpath ${args["folder"]:-$(cliferay folder)} --relative-to $(cliferay folder))
    cd $(cliferay folder)
    git diff --name-only ${args["--branch"]:-master} $FOLDER | get-module | uniq
  }

  # :command.function
  cliferay_deploy_command() {

    # src/commands/deploy.sh
    if [[ "$PWD" = */portal-test ]]; then
        cliferay ant deploy install-portal-snapshot && cp ../../bundles/osgi/test/com.liferay.portal.test.jar ../../bundles/osgi/modules
    elif [[ "$PWD" = */portal-kernel ]]; then
        cliferay ant deploy install-portal-snapshot
    elif [[ "$PWD" = */portal-impl ]]; then
        cliferay ant deploy install-portal-snapshot
    elif [[ "$PWD" = *test-util ]]; then
        cliferay gw -a depl
        JAR=$( echo "$(realpath $PWD --relative-to $(cliferay folder))" | sed 's#modules/apps/[^/]*/\([^/]*\)-test-util#\1#' | sed 's/-/./g' | sed 's/\(.*\)/com.liferay.\1.test.util.jar/')
        cp "$(cliferay folder)/../bundles/osgi/test/$JAR" "$(cliferay folder)/../bundles/osgi/modules/"
    elif [[ "$PWD" = *gradle-plugins* ]]; then
        cliferay gw installCache updateFileVersions
        git add $(cliferay folder) && git commit -m "DELETE ME"
        cd $(cliferay folder)/modules/sdk/gradle-plugins && gw installCache updateFileVersions
        git add $(cliferay folder) && git commit --amend --no-edit
        cd $(cliferay folder)/modules/sdk/gradle-plugins-defaults && gw installCache updateFileVersions
        git add $(cliferay folder) && git commit --amend --no-edit
        cd $(cliferay folder) && cliferay ant setup-sdk
    elif ! [[ "$PWD" = */*-test ]]; then
        cliferay gw -a depl
    fi
  }

  # :command.function
  cliferay_folder_command() {

    # src/commands/folder.sh
    root=$(git rev-parse --show-toplevel 2> /dev/null || true)
    if [[ $root == *liferay-portal* ]]; then
        echo $root
    else
        cliferay home
    fi

  }

  # :command.function
  cliferay_format_source_command() {

    # src/commands/format-source.sh
    cd $(cliferay folder)/portal-impl
    ANT_OPTS=-Xmx4096m ant format-source-current-branch
  }

  # :command.function
  cliferay_home_command() {

    # src/commands/home.sh
    echo $LIFERAY_HOME
  }

  # :command.function
  cliferay_owner_command() {

    # src/commands/owner.sh
    # oneliner: grep -v '^#' "$(git rev-parse --show-toplevel)/.github/CODEOWNERS" | awk '{print length, $0}' | sort -nr | cut -d' ' -f2- | while read -r line; do owned_path=$(echo $line | awk '{print $1}'); if [[ "$(realpath --relative-to=$(git rev-parse --show-toplevel) .)" == ${owned_path%/}* ]]; then echo $line | awk '{print $2}'; break; fi; done;
    # Sort the CODEOWNERS file by the length of the paths in descending order
    # and get the first one that is a prefix of the path received by argument

    root_path=$(git rev-parse --show-toplevel)
    check_path=$(realpath --relative-to=$root_path $(realpath --relative-to=$(pwd) ${args["path"]}))

    grep -v '^#' "$root_path/.github/CODEOWNERS" | awk '{print length, $0}' | sort -nr | cut -d' ' -f2- | while read -r line; do
        owned_path=$(echo $line | awk '{print $1}')
        if [[ "$check_path" == ${owned_path%/}* ]]; then
            echo $line | awk '{print $2}'
            break
        fi
    done
  }

  # :command.function
  cliferay_poshi_command() {

    # src/commands/poshi.sh
    cd $(cliferay folder)
    HOSTNAME=localhost cliferay ant -f build-test.xml run-selenium-test -Dtest.class=${args["test"]}
  }

  # :command.function
  cliferay_super_deploy_command() {

    # src/commands/super-deploy.sh
    (cliferay changed-modules --branch ${args["--branch"]:-master} ${args["folder"]} | run-stdin cliferay deploy)
    (cliferay changed-modules --branch ${args["--branch"]:-master} ${args["folder"]} | run-stdin cliferay deploy)
  }

  # :command.function
  cliferay_brian_command() {

    # src/commands/brian.sh
    PR=${args["pr"]}
    echo "Checking out $PR"
    gh pr checkout -f $PR
    echo "Creating Brian's PR from $PR"
    BRANCH=$(git rev-parse --abbrev-ref HEAD)-brian
    git branch -D $BRANCH &>/dev/null || true
    git checkout -b $BRANCH
    git push -f origin $BRANCH
    git branch -u origin/$BRANCH
    BRIAN_PR=$(gh pr create --title "$(gh pr view $PR --json title --jq .title)" --body "$(gh pr view $PR --json body --jq .body)" -R brianchandotcom/liferay-portal)
    sleep 2
    gh pr comment $BRIAN_PR --body "ci:reopen"
    echo "Closing $PR"
    gh pr comment $PR --body "$BRIAN_PR"
    gh pr close $PR
    echo $BRIAN_PR
  }

  # :command.function
  cliferay_backport_command() {

    # src/commands/backport.sh
    WHITE='\033[00;97m'
    BOLD_WHITE='\033[01;97m'
    NC='\033[0m' # No Color

    TEXT=${args["text"]}
    SOURCE_BRANCH=${args["--branch"]:-ce/master}

    COMMITS=$(git log $SOURCE_BRANCH --format="%H" --grep=^$TEXT | tac)

    echo -e "${BOLD_WHITE}Commits in chronological order:${NC}"
    echo ""

    git --no-pager show --no-patch --oneline $COMMITS
    echo ""

    echo -n -e "${BOLD_WHITE}Do you want to cherry pick all these commits? (y/n)${WHITE} "
    read answer
    echo -e "${NC}"

    if [[ "$answer" == "y" ]]; then
        git checkout -B $(git rev-parse --abbrev-ref HEAD)-$TEXT
        git cherry-pick $COMMITS
    else
        echo "No problem. Try some other time."
    fi

  }

  # :command.function
  cliferay_set_ticket_command() {

    # src/commands/set-ticket.sh
    cd $(cliferay folder)
    FILTER_BRANCH_SQUELCH_WARNING=1 git filter-branch -f --msg-filter 'sed -r "1 s/(^([A-Z]+)-([0-9]*) )|^/'${args["ticket"]}' /"' ${args["--branch"]:-master}..HEAD

  }

  # :command.function
  cliferay_stats_users_jira_command() {

    # src/commands/stats/users/jira.sh
    grep "^${args["user"]}" $(cliferay data-folder)/users | awk '{print $2}'
  }

  # :command.function
  cliferay_stats_users_emails_command() {

    # src/commands/stats/users/emails.sh
    grep "^${args["user"]}" $(cliferay data-folder)/users | awk '{for (i=3; i<=NF; i++) print $i}'
  }

  # :command.function
  cliferay_stats_years_command() {

    # src/commands/stats/years.sh
    cd $(cliferay folder)
    git log --pretty=format:'%cd' --date=format:'%Y' $(cliferay stats users emails ${args[user]:-} | sed 's/[^ ]* */--author=& /g') | sort | uniq -c
  }

  # :command.function
  cliferay_stats_ranking_command() {

    # src/commands/stats/ranking.sh
    cd $(cliferay folder)
    emails=${args[emails]:-}
    git log $(get_git_log_period) --pretty="%ae %an" $(echo ${emails//\"/} | sed 's/[^ ]* */--author=& /g') | iconv -f utf-8 -t ascii//TRANSLIT | awk '{name=$2" "$3; gsub(/[[:punct:]]/, "", name); print name}' | sort | uniq -c | sort -nr
  }

  # :command.function
  cliferay_stats_tickets_command() {

    # src/commands/stats/tickets.sh
    cd $(cliferay folder)
    git log $(get_git_log_period) --pretty=format:'%h %s' $(cliferay stats users emails ${args[user]:-} | sed 's/[^ ]* */--author=& /g') | cliferay tickets
  }

  # :command.function
  cliferay_stats_commits_command() {

    # src/commands/stats/commits.sh
    cd $(cliferay folder)
    git log $(get_git_log_period) --oneline $(cliferay stats users emails ${args[user]:-} | sed 's/[^ ]* */--author=& /g')
  }

  # :command.function
  cliferay_stats_review_command() {

    # src/commands/stats/review.sh
    cd $(cliferay folder)
    get_current_period
    echo "This period ($since - $until) ${args[user]} has:"
    echo ""
    echo "Contributed code for $(cliferay stats tickets $(echo ${args[user]}) | wc -l) different Jira tickets:"
    echo "$(cliferay stats tickets $(echo ${args[user]}) | sed 's/^/  /')"
    echo "With a total of $(cliferay stats commits $(echo ${args[user]}) | wc -l) commits to master. Reaching $(cliferay stats years $(echo ${args[user]}) | awk '{current=$1; if (NR>1) last=current/prev*100; prev=$1} END{print last "%"}') of their total commits from last whole year."
    echo "On average it took $(git log $(get_git_log_period) $(cliferay stats users emails ${args[user]:-} | sed 's/[^ ]* */--author=& /g') --pretty=format:'%ad %cd' --date=unix | awk '{print ($2 - $1)/86400}' | awk '{ total += $1; count++ } END { print total/count }') days from commit to master."
    LPPS=$(cliferay stats assigned ${args[user]} | grep LPP)
    echo "Worked directly or indirectly on $(echo "$LPPS" | wc -l) LPPs:"
    echo "$LPPS" | sed 's/^/  /'
  }

  # :command.function
  cliferay_stats_assigned_command() {

    # src/commands/stats/assigned.sh
    get_current_period
    jira issue list -q "assignee was $(cliferay stats users jira ${args["user"]}) during ($since, $until) AND project IS NOT EMPTY" | cliferay tickets

  }

  # :command.function
  cliferay_stats_headless_summary_command() {

    # src/commands/stats/headless-summary.sh
    cd $(cliferay folder)
    grep '@liferay-headless' .github/CODEOWNERS | awk '{print $1}' | while read folder; do

      echo $folder;
      git log $(get_git_log_period) --oneline $(cliferay stats users emails ${args[user]:-} | sed 's/[^ ]* */--author=& /g') -- "$folder" | cliferay tickets;
      echo ""
    done

  }

  # :command.function
  cliferay_sync_command() {

    # src/commands/sync.sh
    cd $(cliferay folder)
    git add .
    git stash
    git checkout master
    gh repo sync $(gh repo view --json nameWithOwner -q ".nameWithOwner")
    gh repo sync
    git push

  }

  # :command.function
  cliferay_tickets_command() {

    # src/commands/tickets.sh
    grep -oE 'LP[PSD]-[0-9]+' | sort | uniq | sed 's/^/https:\/\/liferay.atlassian.net\/browse\//'
  }

  # :command.function
  cliferay_jira_command() {

    # src/commands/jira.sh
    TICKETS=$(echo "${args["ticket"]:-$(git rev-parse --abbrev-ref HEAD)}" | cliferay tickets)
    if [ -n "$TICKETS" ]; then
        echo "$TICKETS" | xargs python3 -m webbrowser
    else
        cliferay jira --help
    fi
  }

  # :command.function
  cliferay_todo_command() {

    # src/commands/todo.sh
    TITLE="${other_args[*]}"
    URLS=($(grep -oE 'https?://[^ ]+' <<<"$TITLE" || true))
    CLEAN_TITLE=$(echo "$TITLE" | sed -E 's_https?://[^ ]+__g' | xargs)

    RESPONSE=$(curl -s -X POST "https://api.trello.com/1/cards" \
        -d "name=$CLEAN_TITLE" \
        -d "idList=$TRELLO_LIST_ID" \
        -d "key=$TRELLO_API_KEY" \
        -d "token=$TRELLO_TOKEN")

    CARD_ID=$(echo "$RESPONSE" | jq -r '.id // empty')

    for URL in "${URLS[@]}"; do
        curl -s -X POST "https://api.trello.com/1/cards/$CARD_ID/attachments" \
            -d "url=$URL" \
            -d "key=$TRELLO_API_KEY" \
            -d "token=$TRELLO_TOKEN" >/dev/null
    done

    if [[ $RESPONSE == *'"id"'* ]]; then
        echo "$RESPONSE" | jq -r '.shortUrl'
    else
        echo $RESPONSE
    fi

  }

  # :command.parse_requirements
  parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --version | -v)
          version_command
          exit
          ;;

        --help | -h)
          long_usage=yes
          cliferay_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.environment_variables_filter

    env_var_names+=("DEBUG")

    # :command.dependencies_filter
    missing_deps=
    # :dependency.filter
    if ! command -v gh >/dev/null 2>&1; then
      printf "missing dependency: gh\n" >&2
      printf "%s\n\n" "Install it from https://cli.github.com" >&2
      missing_deps=1
    else
      deps['gh']="$(command -v gh | head -n1)"
    fi

    if [[ -n $missing_deps ]]; then
      exit 1
    fi

    # :command.command_filter
    action=${1:-}

    case $action in
      -*) ;;

      aliases)
        action="aliases"
        shift
        cliferay_aliases_parse_requirements "$@"
        shift $#
        ;;

      completions)
        action="completions"
        shift
        cliferay_completions_parse_requirements "$@"
        shift $#
        ;;

      data-folder)
        action="data-folder"
        shift
        cliferay_data_folder_parse_requirements "$@"
        shift $#
        ;;

      init)
        action="init"
        shift
        cliferay_init_parse_requirements "$@"
        shift $#
        ;;

      update)
        action="update"
        shift
        cliferay_update_parse_requirements "$@"
        shift $#
        ;;

      ant)
        action="ant"
        shift
        cliferay_ant_parse_requirements "$@"
        shift $#
        ;;

      build)
        action="build"
        shift
        cliferay_build_parse_requirements "$@"
        shift $#
        ;;

      gw)
        action="gw"
        shift
        cliferay_gw_parse_requirements "$@"
        shift $#
        ;;

      ij)
        action="ij"
        shift
        cliferay_ij_parse_requirements "$@"
        shift $#
        ;;

      morning)
        action="morning"
        shift
        cliferay_morning_parse_requirements "$@"
        shift $#
        ;;

      curl)
        action="curl"
        shift
        cliferay_curl_parse_requirements "$@"
        shift $#
        ;;

      db-name)
        action="db-name"
        shift
        cliferay_db_name_parse_requirements "$@"
        shift $#
        ;;

      elastic-search)
        action="elastic-search"
        shift
        cliferay_elastic_search_parse_requirements "$@"
        shift $#
        ;;

      gogo)
        action="gogo"
        shift
        cliferay_gogo_parse_requirements "$@"
        shift $#
        ;;

      kill)
        action="kill"
        shift
        cliferay_kill_parse_requirements "$@"
        shift $#
        ;;

      nuke)
        action="nuke"
        shift
        cliferay_nuke_parse_requirements "$@"
        shift $#
        ;;

      run)
        action="run"
        shift
        cliferay_run_parse_requirements "$@"
        shift $#
        ;;

      tomcat-folder)
        action="tomcat-folder"
        shift
        cliferay_tomcat_folder_parse_requirements "$@"
        shift $#
        ;;

      baseline)
        action="baseline"
        shift
        cliferay_baseline_parse_requirements "$@"
        shift $#
        ;;

      build-rest)
        action="build-rest"
        shift
        cliferay_build_rest_parse_requirements "$@"
        shift $#
        ;;

      changed-modules | cm)
        action="changed-modules"
        shift
        cliferay_changed_modules_parse_requirements "$@"
        shift $#
        ;;

      deploy | d)
        action="deploy"
        shift
        cliferay_deploy_parse_requirements "$@"
        shift $#
        ;;

      folder)
        action="folder"
        shift
        cliferay_folder_parse_requirements "$@"
        shift $#
        ;;

      format-source | sf)
        action="format-source"
        shift
        cliferay_format_source_parse_requirements "$@"
        shift $#
        ;;

      home)
        action="home"
        shift
        cliferay_home_parse_requirements "$@"
        shift $#
        ;;

      owner)
        action="owner"
        shift
        cliferay_owner_parse_requirements "$@"
        shift $#
        ;;

      poshi)
        action="poshi"
        shift
        cliferay_poshi_parse_requirements "$@"
        shift $#
        ;;

      super-deploy | sd)
        action="super-deploy"
        shift
        cliferay_super_deploy_parse_requirements "$@"
        shift $#
        ;;

      brian)
        action="brian"
        shift
        cliferay_brian_parse_requirements "$@"
        shift $#
        ;;

      backport | b)
        action="backport"
        shift
        cliferay_backport_parse_requirements "$@"
        shift $#
        ;;

      set-ticket)
        action="set-ticket"
        shift
        cliferay_set_ticket_parse_requirements "$@"
        shift $#
        ;;

      stats)
        action="stats"
        shift
        cliferay_stats_parse_requirements "$@"
        shift $#
        ;;

      sync)
        action="sync"
        shift
        cliferay_sync_parse_requirements "$@"
        shift $#
        ;;

      tickets)
        action="tickets"
        shift
        cliferay_tickets_parse_requirements "$@"
        shift $#
        ;;

      jira)
        action="jira"
        shift
        cliferay_jira_parse_requirements "$@"
        shift $#
        ;;

      todo)
        action="todo"
        shift
        cliferay_todo_parse_requirements "$@"
        shift $#
        ;;

      # :command.command_fallback
      "")
        cliferay_usage >&2
        exit 1
        ;;

      *)
        printf "invalid command: %s\n" "$action" >&2
        exit 1
        ;;

    esac

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          printf "invalid argument: %s\n" "$key" >&2
          exit 1

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_aliases_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_aliases_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="aliases"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          printf "invalid argument: %s\n" "$key" >&2
          exit 1

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_completions_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_completions_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="completions"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          printf "invalid argument: %s\n" "$key" >&2
          exit 1

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_data_folder_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_data_folder_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="data-folder"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          printf "invalid argument: %s\n" "$key" >&2
          exit 1

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_init_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_init_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.dependencies_filter
    missing_deps=
    # :dependency.filter
    if ! command -v jira >/dev/null 2>&1; then
      printf "missing dependency: jira\n" >&2
      printf "%s\n\n" "Install it from https://github.com/ankitpokhrel/jira-cli/wiki/Installation" >&2
      missing_deps=1
    else
      deps['jira']="$(command -v jira | head -n1)"
    fi

    if [[ -n $missing_deps ]]; then
      exit 1
    fi

    # :command.command_filter
    action="init"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        # :flag.case
        --email)

          # :flag.case_arg
          if [[ -n ${2+x} ]]; then
            args['--email']="$2"
            shift
            shift
          else
            printf "%s\n" "--email requires an argument: --email EMAIL" >&2
            exit 1
          fi
          ;;

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          printf "invalid argument: %s\n" "$key" >&2
          exit 1

          ;;

      esac
    done

    # :command.required_flags_filter
    if [[ -z ${args['--email']+x} ]]; then
      printf "missing required flag: --email EMAIL\n" >&2
      exit 1
    fi

  }

  # :command.parse_requirements
  cliferay_update_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_update_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="update"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          printf "invalid argument: %s\n" "$key" >&2
          exit 1

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_ant_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_ant_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="ant"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        --)
          shift
          other_args+=("$@")
          break
          ;;

        -?*)
          other_args+=("$1")
          shift
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_catch_all
          other_args+=("$1")
          shift

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_build_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_build_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="build"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          printf "invalid argument: %s\n" "$key" >&2
          exit 1

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_gw_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_gw_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="gw"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        --)
          shift
          other_args+=("$@")
          break
          ;;

        -?*)
          other_args+=("$1")
          shift
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_catch_all
          other_args+=("$1")
          shift

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_ij_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_ij_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="ij"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          printf "invalid argument: %s\n" "$key" >&2
          exit 1

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_morning_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_morning_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="morning"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        # :flag.case
        --no-nuke)

          # :flag.case_no_arg
          args['--no-nuke']=1
          shift
          ;;

        # :flag.case
        --force | -f)

          # :flag.case_no_arg
          args['--force']=1
          shift
          ;;

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          printf "invalid argument: %s\n" "$key" >&2
          exit 1

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_curl_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_curl_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.dependencies_filter
    missing_deps=
    # :dependency.filter
    if ! command -v jq >/dev/null 2>&1; then
      printf "missing dependency: jq\n" >&2
      printf "%s\n\n" "Install it from https://jqlang.github.io/jq" >&2
      missing_deps=1
    else
      deps['jq']="$(command -v jq | head -n1)"
    fi

    if [[ -n $missing_deps ]]; then
      exit 1
    fi

    # :command.command_filter
    action=${1:-}

    case $action in
      -*) ;;

      ai)
        action="ai"
        shift
        cliferay_curl_ai_parse_requirements "$@"
        shift $#
        ;;

      new-instance)
        action="new-instance"
        shift
        cliferay_curl_new_instance_parse_requirements "$@"
        shift $#
        ;;

      new-api)
        action="new-api"
        shift
        cliferay_curl_new_api_parse_requirements "$@"
        shift $#
        ;;

      new-object)
        action="new-object"
        shift
        cliferay_curl_new_object_parse_requirements "$@"
        shift $#
        ;;

      batch-import)
        action="batch-import"
        shift
        cliferay_curl_batch_import_parse_requirements "$@"
        shift $#
        ;;

      # :command.command_fallback
      "")
        cliferay_curl_usage >&2
        exit 1
        ;;

      *)
        printf "invalid command: %s\n" "$action" >&2
        exit 1
        ;;

    esac

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          printf "invalid argument: %s\n" "$key" >&2
          exit 1

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_curl_ai_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_curl_ai_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.environment_variables_filter

    env_var_names+=("OPENAI_API_KEY")
    if [[ -z "${OPENAI_API_KEY:-}" ]]; then
      printf "missing required environment variable: OPENAI_API_KEY\n" >&2
      exit 1
    fi

    # :command.command_filter
    action="curl ai"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        # :flag.case
        --generate | -g)

          # :flag.case_no_arg
          args['--generate']=1
          shift
          ;;

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          # :argument.case
          if [[ -z ${args['prompt']+x} ]]; then
            args['prompt']=$1
            shift
          else
            printf "invalid argument: %s\n" "$key" >&2
            exit 1
          fi

          ;;

      esac
    done

    # :command.required_args_filter
    if [[ -z ${args['prompt']+x} ]]; then
      printf "missing required argument: PROMPT\nusage: cliferay curl ai PROMPT [OPTIONS]\n" >&2

      exit 1
    fi

  }

  # :command.parse_requirements
  cliferay_curl_new_instance_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_curl_new_instance_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="curl new-instance"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          # :argument.case
          if [[ -z ${args['host']+x} ]]; then
            args['host']=$1
            shift
          else
            printf "invalid argument: %s\n" "$key" >&2
            exit 1
          fi

          ;;

      esac
    done

    # :command.required_args_filter
    if [[ -z ${args['host']+x} ]]; then
      printf "missing required argument: HOST\nusage: cliferay curl new-instance HOST\n" >&2

      exit 1
    fi

  }

  # :command.parse_requirements
  cliferay_curl_new_api_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_curl_new_api_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="curl new-api"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          printf "invalid argument: %s\n" "$key" >&2
          exit 1

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_curl_new_object_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_curl_new_object_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="curl new-object"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          printf "invalid argument: %s\n" "$key" >&2
          exit 1

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_curl_batch_import_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_curl_batch_import_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="curl batch-import"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          printf "invalid argument: %s\n" "$key" >&2
          exit 1

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_db_name_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_db_name_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="db-name"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          printf "invalid argument: %s\n" "$key" >&2
          exit 1

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_elastic_search_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_elastic_search_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.dependencies_filter
    missing_deps=
    # :dependency.filter
    if ! command -v jq >/dev/null 2>&1; then
      printf "missing dependency: jq\n" >&2
      printf "%s\n\n" "Install it from https://jqlang.github.io/jq" >&2
      missing_deps=1
    else
      deps['jq']="$(command -v jq | head -n1)"
    fi

    if [[ -n $missing_deps ]]; then
      exit 1
    fi

    # :command.command_filter
    action="elastic-search"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          printf "invalid argument: %s\n" "$key" >&2
          exit 1

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_gogo_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_gogo_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="gogo"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        --)
          shift
          other_args+=("$@")
          break
          ;;

        -?*)
          other_args+=("$1")
          shift
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_catch_all
          other_args+=("$1")
          shift

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_kill_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_kill_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="kill"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          printf "invalid argument: %s\n" "$key" >&2
          exit 1

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_nuke_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_nuke_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="nuke"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          printf "invalid argument: %s\n" "$key" >&2
          exit 1

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_run_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_run_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="run"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        # :flag.case
        --clustered | -c)

          # :flag.case_no_arg
          args['--clustered']=1
          shift
          ;;

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          # :argument.case
          if [[ -z ${args['command']+x} ]]; then
            args['command']=$1
            shift
          else
            printf "invalid argument: %s\n" "$key" >&2
            exit 1
          fi

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_tomcat_folder_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_tomcat_folder_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="tomcat-folder"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          printf "invalid argument: %s\n" "$key" >&2
          exit 1

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_baseline_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_baseline_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="baseline"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          printf "invalid argument: %s\n" "$key" >&2
          exit 1

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_build_rest_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_build_rest_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="build-rest"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          printf "invalid argument: %s\n" "$key" >&2
          exit 1

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_changed_modules_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_changed_modules_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="changed-modules"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        # :flag.case
        --branch | -b)

          # :flag.case_arg
          if [[ -n ${2+x} ]]; then
            args['--branch']="$2"
            shift
            shift
          else
            printf "%s\n" "--branch requires an argument: --branch, -b BRANCH" >&2
            exit 1
          fi
          ;;

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          # :argument.case
          if [[ -z ${args['folder']+x} ]]; then
            args['folder']=$1
            shift
          else
            printf "invalid argument: %s\n" "$key" >&2
            exit 1
          fi

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_deploy_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_deploy_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="deploy"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          printf "invalid argument: %s\n" "$key" >&2
          exit 1

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_folder_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_folder_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="folder"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          printf "invalid argument: %s\n" "$key" >&2
          exit 1

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_format_source_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_format_source_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="format-source"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          printf "invalid argument: %s\n" "$key" >&2
          exit 1

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_home_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_home_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.environment_variables_filter

    env_var_names+=("LIFERAY_HOME")
    if [[ -z "${LIFERAY_HOME:-}" ]]; then
      printf "missing required environment variable: LIFERAY_HOME\n" >&2
      exit 1
    fi

    # :command.command_filter
    action="home"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          printf "invalid argument: %s\n" "$key" >&2
          exit 1

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_owner_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_owner_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="owner"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          # :argument.case
          if [[ -z ${args['path']+x} ]]; then
            args['path']=$1
            shift
          else
            printf "invalid argument: %s\n" "$key" >&2
            exit 1
          fi

          ;;

      esac
    done

    # :command.default_assignments
    [[ -n ${args['path']:-} ]] || args['path']="."

  }

  # :command.parse_requirements
  cliferay_poshi_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_poshi_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="poshi"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          # :argument.case
          if [[ -z ${args['test']+x} ]]; then
            args['test']=$1
            shift
          else
            printf "invalid argument: %s\n" "$key" >&2
            exit 1
          fi

          ;;

      esac
    done

    # :command.required_args_filter
    if [[ -z ${args['test']+x} ]]; then
      printf "missing required argument: TEST\nusage: cliferay poshi TEST\n" >&2

      exit 1
    fi

  }

  # :command.parse_requirements
  cliferay_super_deploy_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_super_deploy_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="super-deploy"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        # :flag.case
        --branch | -b)

          # :flag.case_arg
          if [[ -n ${2+x} ]]; then
            args['--branch']="$2"
            shift
            shift
          else
            printf "%s\n" "--branch requires an argument: --branch, -b BRANCH" >&2
            exit 1
          fi
          ;;

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          # :argument.case
          if [[ -z ${args['folder']+x} ]]; then
            args['folder']=$1
            shift
          else
            printf "invalid argument: %s\n" "$key" >&2
            exit 1
          fi

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_brian_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_brian_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="brian"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          # :argument.case
          if [[ -z ${args['pr']+x} ]]; then
            args['pr']=$1
            shift
          else
            printf "invalid argument: %s\n" "$key" >&2
            exit 1
          fi

          ;;

      esac
    done

    # :command.required_args_filter
    if [[ -z ${args['pr']+x} ]]; then
      printf "missing required argument: PR\nusage: cliferay brian PR\n" >&2

      exit 1
    fi

  }

  # :command.parse_requirements
  cliferay_backport_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_backport_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="backport"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        # :flag.case
        --branch | -b)

          # :flag.case_arg
          if [[ -n ${2+x} ]]; then
            args['--branch']="$2"
            shift
            shift
          else
            printf "%s\n" "--branch requires an argument: --branch, -b BRANCH" >&2
            exit 1
          fi
          ;;

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          # :argument.case
          if [[ -z ${args['text']+x} ]]; then
            args['text']=$1
            shift
          else
            printf "invalid argument: %s\n" "$key" >&2
            exit 1
          fi

          ;;

      esac
    done

    # :command.required_args_filter
    if [[ -z ${args['text']+x} ]]; then
      printf "missing required argument: TEXT\nusage: cliferay backport TEXT [OPTIONS]\n" >&2

      exit 1
    fi

  }

  # :command.parse_requirements
  cliferay_set_ticket_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_set_ticket_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="set-ticket"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        # :flag.case
        --branch | -b)

          # :flag.case_arg
          if [[ -n ${2+x} ]]; then
            args['--branch']="$2"
            shift
            shift
          else
            printf "%s\n" "--branch requires an argument: --branch, -b BRANCH" >&2
            exit 1
          fi
          ;;

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          # :argument.case
          if [[ -z ${args['ticket']+x} ]]; then
            args['ticket']=$1
            shift
          else
            printf "invalid argument: %s\n" "$key" >&2
            exit 1
          fi

          ;;

      esac
    done

    # :command.required_args_filter
    if [[ -z ${args['ticket']+x} ]]; then
      printf "missing required argument: TICKET\nusage: cliferay set-ticket TICKET [OPTIONS]\n" >&2

      exit 1
    fi

  }

  # :command.parse_requirements
  cliferay_stats_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_stats_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action=${1:-}

    case $action in
      -*) ;;

      users)
        action="users"
        shift
        cliferay_stats_users_parse_requirements "$@"
        shift $#
        ;;

      years)
        action="years"
        shift
        cliferay_stats_years_parse_requirements "$@"
        shift $#
        ;;

      ranking)
        action="ranking"
        shift
        cliferay_stats_ranking_parse_requirements "$@"
        shift $#
        ;;

      tickets)
        action="tickets"
        shift
        cliferay_stats_tickets_parse_requirements "$@"
        shift $#
        ;;

      commits)
        action="commits"
        shift
        cliferay_stats_commits_parse_requirements "$@"
        shift $#
        ;;

      review)
        action="review"
        shift
        cliferay_stats_review_parse_requirements "$@"
        shift $#
        ;;

      assigned)
        action="assigned"
        shift
        cliferay_stats_assigned_parse_requirements "$@"
        shift $#
        ;;

      headless-summary)
        action="headless-summary"
        shift
        cliferay_stats_headless_summary_parse_requirements "$@"
        shift $#
        ;;

      # :command.command_fallback
      "")
        cliferay_stats_usage >&2
        exit 1
        ;;

      *)
        printf "invalid command: %s\n" "$action" >&2
        exit 1
        ;;

    esac

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          printf "invalid argument: %s\n" "$key" >&2
          exit 1

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_stats_users_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_stats_users_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action=${1:-}

    case $action in
      -*) ;;

      jira)
        action="jira"
        shift
        cliferay_stats_users_jira_parse_requirements "$@"
        shift $#
        ;;

      emails)
        action="emails"
        shift
        cliferay_stats_users_emails_parse_requirements "$@"
        shift $#
        ;;

      # :command.command_fallback
      "")
        cliferay_stats_users_usage >&2
        exit 1
        ;;

      *)
        printf "invalid command: %s\n" "$action" >&2
        exit 1
        ;;

    esac

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          printf "invalid argument: %s\n" "$key" >&2
          exit 1

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_stats_users_jira_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_stats_users_jira_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="stats users jira"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          # :argument.case
          if [[ -z ${args['user']+x} ]]; then
            args['user']=$1
            shift
          else
            printf "invalid argument: %s\n" "$key" >&2
            exit 1
          fi

          ;;

      esac
    done

    # :command.required_args_filter
    if [[ -z ${args['user']+x} ]]; then
      printf "missing required argument: USER\nusage: cliferay stats users jira USER\n" >&2

      exit 1
    fi

  }

  # :command.parse_requirements
  cliferay_stats_users_emails_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_stats_users_emails_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="stats users emails"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          # :argument.case
          if [[ -z ${args['user']+x} ]]; then
            args['user']=$1
            shift
          else
            printf "invalid argument: %s\n" "$key" >&2
            exit 1
          fi

          ;;

      esac
    done

    # :command.required_args_filter
    if [[ -z ${args['user']+x} ]]; then
      printf "missing required argument: USER\nusage: cliferay stats users emails USER\n" >&2

      exit 1
    fi

  }

  # :command.parse_requirements
  cliferay_stats_years_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_stats_years_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="stats years"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          # :argument.case
          if [[ -z ${args['user']+x} ]]; then
            args['user']=$1
            shift
          else
            printf "invalid argument: %s\n" "$key" >&2
            exit 1
          fi

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_stats_ranking_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_stats_ranking_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="stats ranking"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_repeatable
          # :argument.case_repeatable
          escaped="$(printf '%q' "$1")"
          if [[ -z ${args['emails']+x} ]]; then
            args['emails']="$escaped"
          else
            args['emails']="${args['emails']} $escaped"

          fi
          shift

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_stats_tickets_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_stats_tickets_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="stats tickets"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          # :argument.case
          if [[ -z ${args['user']+x} ]]; then
            args['user']=$1
            shift
          else
            printf "invalid argument: %s\n" "$key" >&2
            exit 1
          fi

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_stats_commits_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_stats_commits_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="stats commits"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          # :argument.case
          if [[ -z ${args['user']+x} ]]; then
            args['user']=$1
            shift
          else
            printf "invalid argument: %s\n" "$key" >&2
            exit 1
          fi

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_stats_review_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_stats_review_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="stats review"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          # :argument.case
          if [[ -z ${args['user']+x} ]]; then
            args['user']=$1
            shift
          else
            printf "invalid argument: %s\n" "$key" >&2
            exit 1
          fi

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_stats_assigned_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_stats_assigned_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="stats assigned"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          # :argument.case
          if [[ -z ${args['user']+x} ]]; then
            args['user']=$1
            shift
          else
            printf "invalid argument: %s\n" "$key" >&2
            exit 1
          fi

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_stats_headless_summary_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_stats_headless_summary_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="stats headless-summary"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          # :argument.case
          if [[ -z ${args['user']+x} ]]; then
            args['user']=$1
            shift
          else
            printf "invalid argument: %s\n" "$key" >&2
            exit 1
          fi

          ;;

      esac
    done

    # :command.required_args_filter
    if [[ -z ${args['user']+x} ]]; then
      printf "missing required argument: USER\nusage: cliferay stats headless-summary USER\n" >&2

      exit 1
    fi

  }

  # :command.parse_requirements
  cliferay_sync_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_sync_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="sync"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          printf "invalid argument: %s\n" "$key" >&2
          exit 1

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_tickets_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_tickets_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="tickets"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          printf "invalid argument: %s\n" "$key" >&2
          exit 1

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_jira_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_jira_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.command_filter
    action="jira"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        -?*)
          printf "invalid option: %s\n" "$key" >&2
          exit 1
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_simple
          # :argument.case
          if [[ -z ${args['ticket']+x} ]]; then
            args['ticket']=$1
            shift
          else
            printf "invalid argument: %s\n" "$key" >&2
            exit 1
          fi

          ;;

      esac
    done

  }

  # :command.parse_requirements
  cliferay_todo_parse_requirements() {
    # :command.fixed_flags_filter
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in
        --help | -h)
          long_usage=yes
          cliferay_todo_usage
          exit
          ;;

        *)
          break
          ;;

      esac
    done

    # :command.environment_variables_filter

    env_var_names+=("TRELLO_API_KEY")
    env_var_names+=("TRELLO_TOKEN")
    env_var_names+=("TRELLO_LIST_ID")
    if [[ -z "${TRELLO_API_KEY:-}" ]]; then
      printf "missing required environment variable: TRELLO_API_KEY\n" >&2
      exit 1
    fi
    if [[ -z "${TRELLO_TOKEN:-}" ]]; then
      printf "missing required environment variable: TRELLO_TOKEN\n" >&2
      exit 1
    fi
    if [[ -z "${TRELLO_LIST_ID:-}" ]]; then
      printf "missing required environment variable: TRELLO_LIST_ID\n" >&2
      exit 1
    fi

    # :command.command_filter
    action="todo"

    # :command.parse_requirements_while
    while [[ $# -gt 0 ]]; do
      key="$1"
      case "$key" in

        --)
          shift
          other_args+=("$@")
          break
          ;;

        -?*)
          other_args+=("$1")
          shift
          ;;

        *)
          # :command.parse_requirements_case
          # :command.parse_requirements_case_catch_all
          other_args+=("$1")
          shift

          ;;

      esac
    done

    # :command.catch_all_filter
    if [[ ${#other_args[@]} -eq 0 ]]; then
      printf "missing required argument: TITLE...\nusage: cliferay todo [--] TITLE...\n" >&2
      exit 1
    fi

  }

  # :command.user_hooks
  before_hook() {
    # src/before.sh
    if [[ "${DEBUG}" == 'true' ]]; then
      set -x
    fi
  }

  # :command.initialize
  initialize() {
    declare -g version="1.0.0"
    set -e

  }

  # :command.run
  run() {
    # :command.globals
    declare -g long_usage=''
    declare -g -A args=()
    declare -g -a other_args=()
    declare -g -A deps=()
    declare -g -a env_var_names=()
    declare -g -a input=()

    normalize_input "$@"
    parse_requirements "${input[@]}"
    before_hook

    case "$action" in
      "aliases") cliferay_aliases_command ;;
      "completions") cliferay_completions_command ;;
      "data-folder") cliferay_data_folder_command ;;
      "init") cliferay_init_command ;;
      "update") cliferay_update_command ;;
      "ant") cliferay_ant_command ;;
      "build") cliferay_build_command ;;
      "gw") cliferay_gw_command ;;
      "ij") cliferay_ij_command ;;
      "morning") cliferay_morning_command ;;
      "curl") cliferay_curl_command ;;
      "curl ai") cliferay_curl_ai_command ;;
      "curl new-instance") cliferay_curl_new_instance_command ;;
      "curl new-api") cliferay_curl_new_api_command ;;
      "curl new-object") cliferay_curl_new_object_command ;;
      "curl batch-import") cliferay_curl_batch_import_command ;;
      "db-name") cliferay_db_name_command ;;
      "elastic-search") cliferay_elastic_search_command ;;
      "gogo") cliferay_gogo_command ;;
      "kill") cliferay_kill_command ;;
      "nuke") cliferay_nuke_command ;;
      "run") cliferay_run_command ;;
      "tomcat-folder") cliferay_tomcat_folder_command ;;
      "baseline") cliferay_baseline_command ;;
      "build-rest") cliferay_build_rest_command ;;
      "changed-modules") cliferay_changed_modules_command ;;
      "deploy") cliferay_deploy_command ;;
      "folder") cliferay_folder_command ;;
      "format-source") cliferay_format_source_command ;;
      "home") cliferay_home_command ;;
      "owner") cliferay_owner_command ;;
      "poshi") cliferay_poshi_command ;;
      "super-deploy") cliferay_super_deploy_command ;;
      "brian") cliferay_brian_command ;;
      "backport") cliferay_backport_command ;;
      "set-ticket") cliferay_set_ticket_command ;;
      "stats") cliferay_stats_command ;;
      "stats users") cliferay_stats_users_command ;;
      "stats users jira") cliferay_stats_users_jira_command ;;
      "stats users emails") cliferay_stats_users_emails_command ;;
      "stats years") cliferay_stats_years_command ;;
      "stats ranking") cliferay_stats_ranking_command ;;
      "stats tickets") cliferay_stats_tickets_command ;;
      "stats commits") cliferay_stats_commits_command ;;
      "stats review") cliferay_stats_review_command ;;
      "stats assigned") cliferay_stats_assigned_command ;;
      "stats headless-summary") cliferay_stats_headless_summary_command ;;
      "sync") cliferay_sync_command ;;
      "tickets") cliferay_tickets_command ;;
      "jira") cliferay_jira_command ;;
      "todo") cliferay_todo_command ;;
    esac
  }

  if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    initialize
    run "$@"
  fi

}

(return 0 2>/dev/null) || cliferay "$@"
