#!/usr/bin/env bash
# This script was generated by bashly 1.0.7 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
liferay_usage() {
  if [[ -n $long_usage ]]; then
    printf "liferay - Daily scripts to work with Liferay\n"
    echo

  else
    printf "liferay - Daily scripts to work with Liferay\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  liferay COMMAND\n"
  printf "  liferay [COMMAND] --help | -h\n"
  printf "  liferay --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Update codebase\n" "update "
  printf "  %s   Run ant all\n" "build  "
  printf "  %s   Run liferay-intellij\n" "ij     "
  printf "  %s   Start the server\n" "run    "
  printf "  %s   Update, build, ij and run\n" "morning"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
liferay_update_usage() {
  if [[ -n $long_usage ]]; then
    printf "liferay update - Update codebase\n"
    echo

  else
    printf "liferay update - Update codebase\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  liferay update\n"
  printf "  liferay update --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
liferay_build_usage() {
  if [[ -n $long_usage ]]; then
    printf "liferay build - Run ant all\n"
    echo

  else
    printf "liferay build - Run ant all\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  liferay build\n"
  printf "  liferay build --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
liferay_ij_usage() {
  if [[ -n $long_usage ]]; then
    printf "liferay ij - Run liferay-intellij\n"
    echo

  else
    printf "liferay ij - Run liferay-intellij\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  liferay ij\n"
  printf "  liferay ij --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
liferay_run_usage() {
  if [[ -n $long_usage ]]; then
    printf "liferay run - Start the server\n"
    echo

  else
    printf "liferay run - Start the server\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  liferay run\n"
  printf "  liferay run --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
liferay_morning_usage() {
  if [[ -n $long_usage ]]; then
    printf "liferay morning - Update, build, ij and run\n"
    echo

  else
    printf "liferay morning - Update, build, ij and run\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  liferay morning\n"
  printf "  liferay morning --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.user_lib
# src/lib/liferay_folder.sh
liferay_folder() {
  echo "/home/alex/Projects/liferay/liferay-portal"
}

# :command.command_functions
# :command.function
liferay_update_command() {
  # src/update_command.sh
  cd $(liferay_folder)
  gh repo sync 4lejandrito/liferay-portal
  gh repo sync
  git push

}

# :command.function
liferay_build_command() {
  # src/build_command.sh
  cd $(liferay_folder)
  ANT_OPTS=-Xmx4096m ant all

}

# :command.function
liferay_ij_command() {
  # src/ij_command.sh
  cd $(liferay_folder)
  ../liferay-intellij/intellij

}

# :command.function
liferay_run_command() {
  # src/run_command.sh
  cd $(liferay_folder)
  ../bundles/tomcat-9.0.75/bin/catalina.sh jpda run

}

# :command.function
liferay_morning_command() {
  # src/morning_command.sh
  liferay update
  liferay build
  liferay ij
  liferay run

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        liferay_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    update)
      action="update"
      shift
      liferay_update_parse_requirements "$@"
      shift $#
      ;;

    build)
      action="build"
      shift
      liferay_build_parse_requirements "$@"
      shift $#
      ;;

    ij)
      action="ij"
      shift
      liferay_ij_parse_requirements "$@"
      shift $#
      ;;

    run)
      action="run"
      shift
      liferay_run_parse_requirements "$@"
      shift $#
      ;;

    morning)
      action="morning"
      shift
      liferay_morning_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      liferay_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
liferay_update_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        liferay_update_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="update"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
liferay_build_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        liferay_build_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="build"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
liferay_ij_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        liferay_ij_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="ij"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
liferay_run_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        liferay_run_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="run"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
liferay_morning_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        liferay_morning_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="morning"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="1.0.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "update") liferay_update_command ;;
    "build") liferay_build_command ;;
    "ij") liferay_ij_command ;;
    "run") liferay_run_command ;;
    "morning") liferay_morning_command ;;
  esac
}

initialize
run "$@"
