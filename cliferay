#!/usr/bin/env bash
# This script was generated by bashly 1.2.5 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
cliferay_usage() {
  if [[ -n $long_usage ]]; then
    printf "cliferay\n\n"
    printf "  Daily scripts to work with Liferay\n  \n  The scripts can be run from any folder:\n    - If the folder is outside the repo it will use LIFERAY_HOME.\n    - If the folder is inside the repo it will use that repo. \n    \n  For example every day I open my terminal and type:\n  \n    > cliferay morning\n  \n  and it will just work no matter which folder I am in.\n\n"
  else
    printf "cliferay - Daily scripts to work with Liferay\n\n"
  fi

  printf "%s\n" "Usage:"
  printf "  cliferay COMMAND\n"
  printf "  cliferay [COMMAND] --help | -h\n"
  printf "  cliferay --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "cliferay Commands:"
  printf "  %s   Update cliferay to the latest version\n" "update         "
  echo
  printf "%s\n" "Git Commands:"
  printf "  %s   Sync fork and local copy with upstream\n" "sync           "
  printf "  %s   Forward an existing PR to Brian and close it\n" "brian          "
  printf "  %s   Set the Jira ticket on your local commits\n" "set-ticket     "
  printf "  %s   Output the owner of a path based on CODEOWNERS\n" "owner          "
  printf "  %s   Gets all Jira tickets from the output of git log\n" "tickets        "
  printf "  %s   Calculate different Git stats\n" "stats          "
  echo
  printf "%s\n" "Build Commands:"
  printf "  %s   Run ant all\n" "build          "
  printf "  %s   Run liferay-intellij\n" "ij             "
  printf "  %s   Run gradlew\n" "gw             "
  printf "  %s   Run ant\n" "ant            "
  echo
  printf "%s\n" "Module Commands:"
  printf "  %s   List changed modules\n" "changed-modules"
  printf "  %s   Deploy changed modules\n" "super-deploy   "
  printf "  %s   Run SF globally\n" "format-source  "
  printf "  %s   Deploy the current folder\n" "deploy         "
  printf "  %s   Run baseline in the current folder\n" "baseline       "
  printf "  %s   Run buildREST globally\n" "build-rest     "
  echo
  printf "%s\n" "Server Commands:"
  printf "  %s   Start the server\n" "run            "
  printf "  %s   Opens the Gogo Shell\n" "gogo           "
  printf "  %s   Kill the server\n" "kill           "
  printf "  %s   Delete all persisted data\n" "nuke           "
  printf "  %s   Print the current tomcat folder\n" "tomcat-folder  "
  printf "  %s   Queries the Elastic Search index\n" "elastic-search "
  printf "  %s   Prints the database name (lportal)\n" "db-name        "
  echo
  printf "%s\n" "Commands:"
  printf "  %s   Sync, build, ij, nuke and run\n" "morning        "
  printf "  %s   Print the source folder\n" "folder         "
  printf "  %s   Send predefined HTTP requests to a running portal\n" "curl           "
  printf "  %s   Backport commits to other branches\n" "backport       "
  printf "  %s   Open a Jira ticket\n" "jira           "
  printf "  %s   Initialize cliferay\n" "init           "
  echo
  printf "%s\n" "Test Commands:"
  printf "  %s   Run a Poshi test\n" "poshi          "
  printf "  %s   Playwright utils\n" "playwright     "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "LIFERAY_HOME (required)"
    printf "    Location of your main liferay-portal clone\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "DEBUG"
    printf "    Set to true to enable echoing of all the commands being run\n"
    echo

  fi
}

# :command.usage
cliferay_update_usage() {
  printf "cliferay update - Update cliferay to the latest version\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay update\n"
  printf "  cliferay update --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_sync_usage() {
  printf "cliferay sync - Sync fork and local copy with upstream\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay sync\n"
  printf "  cliferay sync --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_brian_usage() {
  printf "cliferay brian - Forward an existing PR to Brian and close it\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay brian PR\n"
  printf "  cliferay brian --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "PR"
    printf "    Link to the GitHub PR.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  cliferay brian https://github.com/liferay-headless/liferay-portal/pull/1433\n"
    echo

  fi
}

# :command.usage
cliferay_set_ticket_usage() {
  printf "cliferay set-ticket - Set the Jira ticket on your local commits\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay set-ticket TICKET [OPTIONS]\n"
  printf "  cliferay set-ticket --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--branch, -b BRANCH"
    printf "    Source branch\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "TICKET"
    printf "    The ticket reference.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  cliferay set-ticket LPD-XXXX\n"
    echo

  fi
}

# :command.usage
cliferay_owner_usage() {
  printf "cliferay owner - Output the owner of a path based on CODEOWNERS\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay owner [PATH]\n"
  printf "  cliferay owner --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "PATH"
    printf "    The path to check\n"
    printf "    %s\n" "Default: ."
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  cliferay owner modules/apps/headless/headless-builder\n"
    echo

  fi
}

# :command.usage
cliferay_tickets_usage() {
  printf "cliferay tickets - Gets all Jira tickets from the output of git log\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay tickets\n"
  printf "  cliferay tickets --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  git log | cliferay tickets\n"
    echo

  fi
}

# :command.usage
cliferay_stats_usage() {
  printf "cliferay stats - Calculate different Git stats\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay stats COMMAND\n"
  printf "  cliferay stats [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Get info about users\n" "users   "
  printf "  %s   Shows commit count per year\n" "years   "
  printf "  %s   Shows commit ranking\n" "ranking "
  printf "  %s   Shows tickets worked on based on commits\n" "tickets "
  printf "  %s   Prints the commits for the user\n" "commits "
  printf "  %s   Writes a review based on git and jira stats\n" "review  "
  printf "  %s   Shows tickets assigned during the quarter\n" "assigned"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_stats_users_usage() {
  printf "cliferay stats users - Get info about users\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay stats users COMMAND\n"
  printf "  cliferay stats users [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Shows the jira id\n" "jira  "
  printf "  %s   Shows the user git emails\n" "emails"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_stats_users_jira_usage() {
  printf "cliferay stats users jira - Shows the jira id\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay stats users jira USER\n"
  printf "  cliferay stats users jira --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "USER"
    printf "    The user handle.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  cliferay stats users jira alejandro.tardin\n"
    echo

  fi
}

# :command.usage
cliferay_stats_users_emails_usage() {
  printf "cliferay stats users emails - Shows the user git emails\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay stats users emails USER\n"
  printf "  cliferay stats users emails --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "USER"
    printf "    The user handle.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  cliferay stats users emails alejandro.tardin\n"
    echo

  fi
}

# :command.usage
cliferay_stats_years_usage() {
  printf "cliferay stats years - Shows commit count per year\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay stats years [USER]\n"
  printf "  cliferay stats years --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "USER"
    printf "    The user.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  cliferay stats years alejandro.tardin\n"
    echo

  fi
}

# :command.usage
cliferay_stats_ranking_usage() {
  printf "cliferay stats ranking - Shows commit ranking\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay stats ranking [EMAILS...]\n"
  printf "  cliferay stats ranking --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "EMAILS..."
    printf "    The emails of the commit authors.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  cliferay stats ranking alejandro.tardin@liferay.com\n"
    echo

  fi
}

# :command.usage
cliferay_stats_tickets_usage() {
  printf "cliferay stats tickets - Shows tickets worked on based on commits\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay stats tickets [USER]\n"
  printf "  cliferay stats tickets --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "USER"
    printf "    The user.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  cliferay stats tickets alejandro.tardin\n"
    echo

  fi
}

# :command.usage
cliferay_stats_commits_usage() {
  printf "cliferay stats commits - Prints the commits for the user\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay stats commits [USER]\n"
  printf "  cliferay stats commits --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "USER"
    printf "    The user.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  cliferay stats commits alejandro.tardin@liferay.com\n"
    echo

  fi
}

# :command.usage
cliferay_stats_review_usage() {
  printf "cliferay stats review - Writes a review based on git and jira stats\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay stats review [USER]\n"
  printf "  cliferay stats review --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "USER"
    printf "    The user to be reviewed.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  cliferay stats review alejandro.tardin@liferay.com\n"
    echo

  fi
}

# :command.usage
cliferay_stats_assigned_usage() {
  printf "cliferay stats assigned - Shows tickets assigned during the quarter\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay stats assigned [USER]\n"
  printf "  cliferay stats assigned --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "USER"
    printf "    The user.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  cliferay stats assigned alejandro.tardin\n"
    echo

  fi
}

# :command.usage
cliferay_build_usage() {
  printf "cliferay build - Run ant all\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay build\n"
  printf "  cliferay build --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_ij_usage() {
  printf "cliferay ij - Run liferay-intellij\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay ij\n"
  printf "  cliferay ij --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_gw_usage() {
  printf "cliferay gw - Run gradlew\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay gw [--] [...]\n"
  printf "  cliferay gw --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_ant_usage() {
  printf "cliferay ant - Run ant\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay ant [--] [...]\n"
  printf "  cliferay ant --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_changed_modules_usage() {
  printf "cliferay changed-modules - List changed modules\n\n"
  printf "Alias: cm\n"
  echo

  printf "%s\n" "Usage:"
  printf "  cliferay changed-modules [OPTIONS]\n"
  printf "  cliferay changed-modules --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--branch, -b BRANCH"
    printf "    Branch to compare to\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_super_deploy_usage() {
  printf "cliferay super-deploy - Deploy changed modules\n\n"
  printf "Alias: sd\n"
  echo

  printf "%s\n" "Usage:"
  printf "  cliferay super-deploy [OPTIONS]\n"
  printf "  cliferay super-deploy --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--branch, -b BRANCH"
    printf "    Branch to compare to\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_format_source_usage() {
  printf "cliferay format-source - Run SF globally\n\n"
  printf "Alias: sf\n"
  echo

  printf "%s\n" "Usage:"
  printf "  cliferay format-source\n"
  printf "  cliferay format-source --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_deploy_usage() {
  printf "cliferay deploy - Deploy the current folder\n\n"
  printf "Alias: d\n"
  echo

  printf "%s\n" "Usage:"
  printf "  cliferay deploy\n"
  printf "  cliferay deploy --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_baseline_usage() {
  printf "cliferay baseline - Run baseline in the current folder\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay baseline\n"
  printf "  cliferay baseline --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_build_rest_usage() {
  printf "cliferay build-rest - Run buildREST globally\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay build-rest\n"
  printf "  cliferay build-rest --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  cliferay build-rest\n"
    echo

  fi
}

# :command.usage
cliferay_run_usage() {
  printf "cliferay run - Start the server\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay run [COMMAND]\n"
  printf "  cliferay run --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "COMMAND"
    printf "    Tomcat command (jpda by default)\n"
    echo

  fi
}

# :command.usage
cliferay_gogo_usage() {
  printf "cliferay gogo - Opens the Gogo Shell\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay gogo [--] [COMMAND...]\n"
  printf "  cliferay gogo --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    echo "  COMMAND..."
    printf "    Optional Gogo shell command to run\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  cliferay gogo\n"
    printf "  cliferay gogo unsatisfied\n"
    printf "  cliferay gogo jaxrs:check\n"
    echo

  fi
}

# :command.usage
cliferay_kill_usage() {
  printf "cliferay kill - Kill the server\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay kill\n"
  printf "  cliferay kill --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_nuke_usage() {
  printf "cliferay nuke - Delete all persisted data\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay nuke\n"
  printf "  cliferay nuke --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_tomcat_folder_usage() {
  printf "cliferay tomcat-folder - Print the current tomcat folder\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay tomcat-folder\n"
  printf "  cliferay tomcat-folder --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_elastic_search_usage() {
  printf "cliferay elastic-search - Queries the Elastic Search index\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay elastic-search\n"
  printf "  cliferay elastic-search --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_db_name_usage() {
  printf "cliferay db-name - Prints the database name (lportal)\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay db-name\n"
  printf "  cliferay db-name --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_morning_usage() {
  printf "cliferay morning - Sync, build, ij, nuke and run\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay morning [OPTIONS]\n"
  printf "  cliferay morning --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--no-nuke"
    printf "    Skip nuke\n"
    echo

    # :flag.usage
    printf "  %s\n" "--force, -f"
    printf "    Force cleanup by running git clean -fdx\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_folder_usage() {
  printf "cliferay folder - Print the source folder\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay folder\n"
  printf "  cliferay folder --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_completions_usage() {
  printf "cliferay completions - Print completions script\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay completions\n"
  printf "  cliferay completions --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_aliases_usage() {
  printf "cliferay aliases - Print aliases script\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay aliases\n"
  printf "  cliferay aliases --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_curl_usage() {
  printf "cliferay curl - Send predefined HTTP requests to a running portal\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay curl COMMAND\n"
  printf "  cliferay curl [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Create a new instance\n" "new-instance"
  printf "  %s   Create a new API Builder API\n" "new-api     "
  printf "  %s   Create a new object definition with some entries\n" "new-object  "
  printf "  %s   Import a new object entry with batch\n" "batch-import"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_curl_new_instance_usage() {
  printf "cliferay curl new-instance - Create a new instance\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay curl new-instance HOST\n"
  printf "  cliferay curl new-instance --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "HOST"
    printf "    The virtual host.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  cliferay curl new-instance www.able.com\n"
    echo

  fi
}

# :command.usage
cliferay_curl_new_api_usage() {
  printf "cliferay curl new-api - Create a new API Builder API\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay curl new-api\n"
  printf "  cliferay curl new-api --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_curl_new_object_usage() {
  printf "cliferay curl new-object - Create a new object definition with some entries\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay curl new-object\n"
  printf "  cliferay curl new-object --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_curl_batch_import_usage() {
  printf "cliferay curl batch-import - Import a new object entry with batch\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay curl batch-import\n"
  printf "  cliferay curl batch-import --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_backport_usage() {
  printf "cliferay backport - Backport commits to other branches\n\n"
  printf "Alias: b\n"
  echo

  printf "%s\n" "Usage:"
  printf "  cliferay backport TEXT [OPTIONS]\n"
  printf "  cliferay backport --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--branch, -b BRANCH"
    printf "    Source branch\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "TEXT"
    printf "    Text to filter commits by (LPD-1234).\n"
    echo

  fi
}

# :command.usage
cliferay_jira_usage() {
  printf "cliferay jira - Open a Jira ticket\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay jira [TICKET]\n"
  printf "  cliferay jira --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "TICKET"
    printf "    The ticket reference (LPD-1234). If not present it will be extracted from\n    the git branch name.\n"
    echo

  fi
}

# :command.usage
cliferay_init_usage() {
  printf "cliferay init - Initialize cliferay\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay init [OPTIONS]\n"
  printf "  cliferay init --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--email EMAIL (required)"
    printf "    Your Liferay email\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_poshi_usage() {
  printf "cliferay poshi - Run a Poshi test\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay poshi TEST\n"
  printf "  cliferay poshi --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "TEST"
    printf "    The test to run.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  cliferay poshi GeneratePathStructureForEndpoints#CanValidatePathInAPIEndpoint\n"
    echo

  fi
}

# :command.usage
cliferay_playwright_usage() {
  printf "cliferay playwright - Playwright utils\n\n"
  printf "Alias: pw\n"
  echo

  printf "%s\n" "Usage:"
  printf "  cliferay playwright COMMAND\n"
  printf "  cliferay playwright [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Install npm dependencies in playwright\n" "install"
  printf "  %s   Run test, pass the options you need for playwright test command https://playwright.dev/docs/test-cli\n" "test   "
  printf "  %s   Launch the playwright ui mode https://playwright.dev/docs/test-ui-mode\n" "ui     "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_playwright_install_usage() {
  printf "cliferay playwright install - Install npm dependencies in playwright\n\n"
  printf "Alias: i\n"
  echo

  printf "%s\n" "Usage:"
  printf "  cliferay playwright install\n"
  printf "  cliferay playwright install --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_playwright_test_usage() {
  printf "cliferay playwright test - Run test, pass the options you need for playwright test command https://playwright.dev/docs/test-cli\n\n"
  printf "Alias: t\n"
  echo

  printf "%s\n" "Usage:"
  printf "  cliferay playwright test [--] [...]\n"
  printf "  cliferay playwright test --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  cliferay playwright run --project blogs-web --list\n"
    printf "  cliferay playwright run -g \"@LPD-26659\" --reporter list\n"
    echo

  fi
}

# :command.usage
cliferay_playwright_ui_usage() {
  printf "cliferay playwright ui - Launch the playwright ui mode https://playwright.dev/docs/test-ui-mode\n\n"

  printf "%s\n" "Usage:"
  printf "  cliferay playwright ui\n"
  printf "  cliferay playwright ui --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  cliferay playwright ui\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/functions.sh
function get-module() {
	while read line
	do
		if test -f $line/bnd.bnd; then
			echo "$line";
		elif [ "$line" != "." ]; then
			(dirname $line | get-module)
		fi
	done
}

function run-stdin() {
	set +e
	while read line
	do
		echo "" | (cd $(cliferay folder)/$line; $*)
	done
	set -e
}

function liferay-get-modules() {
	(cd $(cliferay folder) && $* --name-only | get-module | uniq)
}

function liferay-curl() {
	curl --no-progress-meter -u 'test@liferay.com:test' "$@" | jq
}

function get_current_quarter() {
	current_year=$(date '+%Y')
    month=$(date '+%m')
    case $month in
        01|02|03)
            since="${current_year}-01-01"
            until="${current_year}-04-01"
            ;;
        04|05|06)
            since="${current_year}-04-01"
            until="${current_year}-07-01"
            ;;
        07|08|09)
            since="${current_year}-07-01"
            until="${current_year}-10-01"
            ;;
        10|11|12)
            since="${current_year}-10-01"
            until="$(($current_year + 1))-01-01"
            ;;
    esac
}

# src/lib/send_completions.sh
send_completions() {
  echo $'# cliferay completion                                      -*- shell-script -*-'
  echo $''
  echo $'# This bash completions script was generated by'
  echo $'# completely (https://github.com/dannyben/completely)'
  echo $'# Modifying it manually is not recommended'
  echo $''
  echo $'_cliferay_completions_filter() {'
  echo $'  local words="$1"'
  echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
  echo $'  local result=()'
  echo $''
  echo $'  if [[ "${cur:0:1}" == "-" ]]; then'
  echo $'    echo "$words"'
  echo $''
  echo $'  else'
  echo $'    for word in $words; do'
  echo $'      [[ "${word:0:1}" != "-" ]] && result+=("$word")'
  echo $'    done'
  echo $''
  echo $'    echo "${result[*]}"'
  echo $''
  echo $'  fi'
  echo $'}'
  echo $''
  echo $'_cliferay_completions() {'
  echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
  echo $'  local compwords=("${COMP_WORDS[@]:1:$COMP_CWORD-1}")'
  echo $'  local compline="${compwords[*]}"'
  echo $''
  echo $'  case "$compline" in'
  echo $'    \'playwright install\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'stats users emails\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'curl batch-import\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'curl new-instance\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'stats users jira\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'curl new-object\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'playwright test\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'changed-modules\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--branch --help -b -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'elastic-search\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'stats assigned\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'format-source\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'playwright ui\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'stats commits\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'stats tickets\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'stats ranking\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'tomcat-folder\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'stats review\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'playwright i\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'playwright t\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'super-deploy\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--branch --help -b -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'curl new-api\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'stats years\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'stats users\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h emails jira")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'build-rest\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'pw install\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'playwright\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h i install t test ui")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'set-ticket\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--branch --help -b -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'baseline\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'backport\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--branch --help -b -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'pw test\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'tickets\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'db-name\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'morning\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--force --help --no-nuke -f -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'deploy\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'update\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'folder\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'pw ui\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'poshi\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'brian\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'owner\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'stats\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h assigned commits ranking review tickets users years")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'build\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'curl\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h batch-import new-api new-instance new-object")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'nuke\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'kill\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'sync\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'gogo\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h diag jaxrs:check scr:list unsatisfied")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'jira\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'init\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--email --help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'pw t\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'pw i\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'run\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'ant\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'pw\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h i install t test ui")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'sf\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'sd\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--branch --help -b -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'cm\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--branch --help -b -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'gw\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'ij\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'b\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--branch --help -b -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'d\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    *)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_cliferay_completions_filter "--help --version -h -v ant b backport baseline brian build build-rest changed-modules cm curl d db-name deploy elastic-search folder format-source gogo gw ij init jira kill morning nuke owner playwright poshi pw run sd set-ticket sf stats super-deploy sync tickets tomcat-folder update")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'  esac'
  echo $'} &&'
  echo $'  complete -F _cliferay_completions cliferay'
  echo $''
  echo $'# ex: filetype=sh'
}

# :command.command_functions
# :command.function
cliferay_update_command() {

  # src/commands/update.sh
  cd "$(dirname "$0")"

  git pull
}

# :command.function
cliferay_sync_command() {

  # src/commands/sync.sh
  cd $(cliferay folder)
  git stash
  git checkout master
  gh repo sync $(gh repo view --json nameWithOwner -q ".nameWithOwner")
  gh repo sync
  git push

}

# :command.function
cliferay_brian_command() {

  # src/commands/brian.sh
  PR=${args["pr"]}
  echo "Checking out $PR"
  gh pr checkout -f $PR
  echo "Creating Brian's PR from $PR"
  BRANCH=$(git rev-parse --abbrev-ref HEAD)-brian
  git branch -D $BRANCH &>/dev/null || true
  git checkout -b $BRANCH
  git push -f origin $BRANCH
  git branch -u origin/$BRANCH
  BRIAN_PR=$(gh pr create --title "$(gh pr view $PR --json title --jq .title)" --body "$(gh pr view $PR --json body --jq .body)" -R brianchandotcom/liferay-portal)
  sleep 2
  gh pr comment $BRIAN_PR --body "ci:reopen"
  echo "Closing $PR"
  gh pr comment $PR --body "$BRIAN_PR"
  gh pr close $PR
  echo $BRIAN_PR
}

# :command.function
cliferay_set_ticket_command() {

  # src/commands/set-ticket.sh
  cd $(cliferay folder)
  FILTER_BRANCH_SQUELCH_WARNING=1 git filter-branch -f --msg-filter 'sed -r "1 s/(^([A-Z]+)-([0-9]*) )|^/'${args["ticket"]}' /"' ${args["--branch"]:-master}..HEAD

}

# :command.function
cliferay_owner_command() {

  # src/commands/owner.sh
  # oneliner: grep -v '^#' "$(git rev-parse --show-toplevel)/.github/CODEOWNERS" | awk '{print length, $0}' | sort -nr | cut -d' ' -f2- | while read -r line; do owned_path=$(echo $line | awk '{print $1}'); if [[ "$(realpath --relative-to=$(git rev-parse --show-toplevel) .)" == ${owned_path%/}* ]]; then echo $line | awk '{print $2}'; break; fi; done;
  # Sort the CODEOWNERS file by the length of the paths in descending order
  # and get the first one that is a prefix of the path received by argument

  root_path=$(git rev-parse --show-toplevel)
  check_path=$(realpath --relative-to=$root_path $(realpath --relative-to=$(pwd) ${args["path"]}))

  grep -v '^#' "$root_path/.github/CODEOWNERS" | awk '{print length, $0}' | sort -nr | cut -d' ' -f2- | while read -r line; do
      owned_path=$(echo $line | awk '{print $1}')
      if [[ "$check_path" == ${owned_path%/}* ]]; then
          echo $line | awk '{print $2}'
          break
      fi
  done
}

# :command.function
cliferay_tickets_command() {

  # src/commands/tickets.sh
  grep -oE 'LP[PSD]-[0-9]+' | sort | uniq | sed 's/^/https:\/\/liferay.atlassian.net\/browse\//'
}

# :command.function
cliferay_stats_users_jira_command() {

  # src/commands/stats/users/jira.sh
  grep "^${args["user"]}" $(dirname "$(readlink -f "$0")")/users | awk '{print $2}'
}

# :command.function
cliferay_stats_users_emails_command() {

  # src/commands/stats/users/emails.sh
  grep "^${args["user"]}" $(dirname "$(readlink -f "$0")")/users | awk '{for (i=3; i<=NF; i++) print $i}'
}

# :command.function
cliferay_stats_years_command() {

  # src/commands/stats/years.sh
  cd $(cliferay folder)
  git log --pretty=format:'%cd' --date=format:'%Y' $(cliferay stats users emails ${args[user]:-} | sed 's/[^ ]* */--author=& /g') | sort | uniq -c
}

# :command.function
cliferay_stats_ranking_command() {

  # src/commands/stats/ranking.sh
  cd $(cliferay folder)
  emails=${args[emails]:-}
  get_current_quarter
  git log --since="$since" --until="$until" --pretty="%ae %an" $(echo ${emails//\"/} | sed 's/[^ ]* */--author=& /g') | iconv -f utf-8 -t ascii//TRANSLIT | awk '{name=$2" "$3; gsub(/[[:punct:]]/, "", name); print name}' | sort | uniq -c | sort -nr
}

# :command.function
cliferay_stats_tickets_command() {

  # src/commands/stats/tickets.sh
  cd $(cliferay folder)
  get_current_quarter
  git log --since="$since" --until="$until" --pretty=format:'%h %s' $(cliferay stats users emails ${args[user]:-} | sed 's/[^ ]* */--author=& /g') | cliferay tickets
}

# :command.function
cliferay_stats_commits_command() {

  # src/commands/stats/commits.sh
  cd $(cliferay folder)
  get_current_quarter
  git log --since="$since" --until="$until" --oneline $(cliferay stats users emails ${args[user]:-} | sed 's/[^ ]* */--author=& /g')
}

# :command.function
cliferay_stats_review_command() {

  # src/commands/stats/review.sh
  cd $(cliferay folder)
  get_current_quarter
  echo "This quarter ${args[user]} has:"
  echo ""
  echo "Contributed code for $(cliferay stats tickets $(echo ${args[user]}) | wc -l) different Jira tickets:"
  echo "$(cliferay stats tickets $(echo ${args[user]}) | sed 's/^/  /')"
  echo "With a total of $(cliferay stats commits $(echo ${args[user]}) | wc -l) commits to master. Reaching $(cliferay stats years $(echo ${args[user]}) | awk '{current=$1; if (NR>1) last=current/prev*100; prev=$1} END{print last "%"}') of their total commits from last whole year."
  echo "On average it took $(git log --since="$since" --until="$until" $(cliferay stats users emails ${args[user]:-} | sed 's/[^ ]* */--author=& /g') --pretty=format:'%ad %cd' --date=unix | awk '{print ($2 - $1)/86400}' | awk '{ total += $1; count++ } END { print total/count }') days from commit to master."
  LPPS=$(cliferay stats assigned ${args[user]} | grep LPP)
  echo "Worked directly or indirectly on $(echo "$LPPS" | wc -l) LPPs:"
  echo "$LPPS" | sed 's/^/  /'
}

# :command.function
cliferay_stats_assigned_command() {

  # src/commands/stats/assigned.sh
  get_current_quarter
  jira issue list -q "assignee was $(cliferay stats users jira ${args["user"]}) during ($since, $until) AND project IS NOT EMPTY" | cliferay tickets

}

# :command.function
cliferay_build_command() {

  # src/commands/build.sh
  cd $(cliferay folder)
  cliferay ant setup-profile-dxp
  cliferay ant all

}

# :command.function
cliferay_ij_command() {

  # src/commands/ij.sh
  cd $(cliferay folder)
  if [ ! -d "../liferay-intellij" ]; then
      gh repo clone holatuwol/liferay-intellij "../liferay-intellij"
  fi
  (cd ../liferay-intellij; git pull)
  ../liferay-intellij/intellij

}

# :command.function
cliferay_gw_command() {

  # src/commands/gw.sh
  $(cliferay folder)/gradlew ${other_args[*]}
}

# :command.function
cliferay_ant_command() {

  # src/commands/ant.sh
  ANT_OPTS=-Xmx8192m ant ${other_args[*]}
}

# :command.function
cliferay_changed_modules_command() {

  # src/commands/changed-modules.sh
  cd $(cliferay folder)
  liferay-get-modules git diff --name-only ${args["--branch"]:-master}
}

# :command.function
cliferay_super_deploy_command() {

  # src/commands/super-deploy.sh
  cd $(cliferay folder)
  cliferay changed-modules --branch ${args["--branch"]:-master} | run-stdin cliferay deploy
  cliferay changed-modules --branch ${args["--branch"]:-master} | run-stdin cliferay deploy
}

# :command.function
cliferay_format_source_command() {

  # src/commands/format-source.sh
  cd $(cliferay folder)/portal-impl
  ANT_OPTS=-Xmx4096m ant format-source-current-branch
}

# :command.function
cliferay_deploy_command() {

  # src/commands/deploy.sh
  if [[ "$PWD" = */portal-test ]]; then
      cliferay ant deploy install-portal-snapshot && cp ../../bundles/osgi/test/com.liferay.portal.test.jar ../../bundles/osgi/modules
  elif [[ "$PWD" = */portal-kernel ]]; then
      cliferay ant deploy install-portal-snapshot
  elif [[ "$PWD" = */portal-impl ]]; then
      cliferay ant deploy install-portal-snapshot
  elif [[ "$PWD" = *test-util ]]; then
      cliferay gw -a depl
      JAR=$( echo "$(realpath $PWD --relative-to $(cliferay folder))" | sed 's#modules/apps/[^/]*/\([^/]*\)-test-util#\1#' | sed 's/-/./g' | sed 's/\(.*\)/com.liferay.\1.test.util.jar/')
      cp "$(cliferay folder)/../bundles/osgi/test/$JAR" "$(cliferay folder)/../bundles/osgi/modules/"
  elif [[ "$PWD" = *gradle-plugins* ]]; then
      cliferay gw installCache updateFileVersions
      git add $(cliferay folder) && git commit -m "DELETE ME"
      cd $(cliferay folder)/modules/sdk/gradle-plugins && gw installCache updateFileVersions
      git add $(cliferay folder) && git commit --amend --no-edit
      cd $(cliferay folder)/modules/sdk/gradle-plugins-defaults && gw installCache updateFileVersions
      git add $(cliferay folder) && git commit --amend --no-edit
      cd $(cliferay folder) && cliferay ant setup-sdk
  elif ! [[ "$PWD" = */*-test ]]; then
      cliferay gw -a depl
  fi
}

# :command.function
cliferay_baseline_command() {

  # src/commands/baseline.sh
  if [[ "$PWD" = */portal-kernel || "$PWD" = */portal-impl ]]; then
      cliferay ant -Dbaseline.jar.report.level=persist clean jar
  elif ! [[ "$PWD" = */*-test ]]; then
      cliferay gw baseline
  fi
}

# :command.function
cliferay_build_rest_command() {

  # src/commands/build-rest.sh
  cd $(cliferay folder)/modules/apps && cliferay gw buildREST
  cd $(cliferay folder)/modules/dxp/apps && cliferay gw buildREST
  cd $(cliferay folder)/modules/util/portal-tools-rest-builder-test-impl && cliferay gw buildREST
}

# :command.function
cliferay_run_command() {

  # src/commands/run.sh
  BUNDLES=$(realpath $(cliferay folder)/../bundles)
  echo "
  # This file was created by cliferay $(cliferay --version).
  # Please do not alter it.
  # Put your custom properties in the portal-custom.properties file instead.

  admin.email.from.address=test@liferay.com
  admin.email.from.name=Test Test
  default.admin.email.address.prefix=test

  captcha.enforce.disabled=true

  company.security.strangers.verify=false
  company.default.locale=en_US
  company.default.time.zone=UTC
  company.default.web.id=liferay.com

  jdbc.default.driverClassName=com.mysql.cj.jdbc.Driver
  jdbc.default.password=root
  jdbc.default.url=jdbc:mysql://localhost/$(cliferay db-name)?characterEncoding=UTF-8&dontTrackOpenResources=true&holdResultsOpenOverStatementClose=true&serverTimezone=GMT&useFastDateParsing=false&useUnicode=true
  jdbc.default.username=root

  liferay.home=$BUNDLES

  setup.wizard.enabled=false
  terms.of.use.required=false
  passwords.default.policy.change.required=false
  users.reminder.queries.required=false
  users.reminder.queries.enabled=false
  enterprise.product.notification.enabled=false

  feature.flag.ui.visible[dev]=true

  module.framework.properties.osgi.console=11311

  include-and-override=\${liferay.home}/portal-custom.properties
  " > $BUNDLES/portal-ext.properties

  if [ ! -f "$BUNDLES/portal-custom.properties" ]; then
      echo "# Override your config here, don't touch portal-ext.properties" > $BUNDLES/portal-custom.properties
  fi

  mkdir -p $BUNDLES/osgi/configs
  echo 'maxChallenges=I"-1"' > $BUNDLES/osgi/configs/com.liferay.captcha.configuration.CaptchaConfiguration.config

  $(cliferay tomcat-folder)/bin/catalina.sh ${args["command"]:-jpda} run

}

# :command.function
cliferay_gogo_command() {

  # src/commands/gogo.sh
  if [ ${#other_args[@]} -eq 0 ]; then
      telnet localhost 11311
  else
  expect <<EOF
spawn telnet localhost 11311
expect "g! "
send "${other_args[*]}\r"
expect "g! "
send "disconnect\r"
expect "Disconnect from console? (y/n; default=y)"
send "y\r"
expect eof
EOF
  fi

}

# :command.function
cliferay_kill_command() {

  # src/commands/kill.sh
  pgrep -f tomcat | xargs kill -9
}

# :command.function
cliferay_nuke_command() {

  # src/commands/nuke.sh
  cd $(cliferay folder)
  rm -rf ../bundles/elasticsearch7 ../bundles/data ../bundles/osgi/war ../bundles/osgi/state $(cliferay tomcat-folder)/work/Catalina
  echo "drop database IF EXISTS $(cliferay db-name); create database $(cliferay db-name) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin" | mysql -uroot -proot
}

# :command.function
cliferay_tomcat_folder_command() {

  # src/commands/tomcat-folder.sh
  cd $(cliferay folder)/../bundles
  ls -d "$PWD/"** | grep tomcat | tail -n 1
}

# :command.function
cliferay_elastic_search_command() {

  # src/commands/elastic-search.sh
  liferay-curl "http://localhost:9201/*/_search?pretty=true&size=10000"
}

# :command.function
cliferay_db_name_command() {

  # src/commands/db-name.sh
  [[ "$(cliferay folder)" =~ .*-ee$ ]] && echo "lportalee" || echo "lportal"
}

# :command.function
cliferay_morning_command() {

  # src/commands/morning.sh
  cliferay sync
  if [[ ${args["--force"]} = 1 ]]; then
      cd $(cliferay folder) && git clean -fdx
  fi
  cliferay build
  cliferay ij
  if [[ ${args["--no-nuke"]} != 1 ]]; then
      cliferay nuke
  fi
  cliferay playwright install
  cliferay run

}

# :command.function
cliferay_folder_command() {

  # src/commands/folder.sh
  root=$(git rev-parse --show-toplevel 2> /dev/null || true)
  if [[ $root == *liferay-portal* ]]; then
      echo $root
  else
      echo $LIFERAY_HOME
  fi

}

# :command.function
cliferay_completions_command() {

  # src/commands/completions.sh
  send_completions
}

# :command.function
cliferay_aliases_command() {

  # src/commands/aliases.sh
  echo 'alias gw="cliferay gw"'
  echo 'alias cdl="cd $(cliferay folder)"'
  echo 'alias c="cliferay"'
}

# :command.function
cliferay_curl_new_instance_command() {

  # src/commands/curl/new-instance.sh
  HOST=${args["host"]}
  liferay-curl -X 'POST' \
    'http://localhost:8080/o/headless-portal-instances/v1.0/portal-instances' \
    -H 'accept: application/json' \
    -H 'Content-Type: application/json' \
    -d '{
    "domain": "liferay.com",
    "portalInstanceId": "'$HOST'",
    "virtualHost": "'$HOST'"
  }'
}

# :command.function
cliferay_curl_new_api_command() {

  # src/commands/curl/new-api.sh
  liferay-curl -X "DELETE" "http://localhost:8080/o/headless-builder/applications/by-external-reference-code/headless-builder-test"
  liferay-curl -X "POST" "http://localhost:8080/o/headless-builder/applications" \
       -H 'Content-Type: application/json' \
       -d $'{
    "baseURL": "headless-builder-test",
    "title": "API Builder Test",
    "externalReferenceCode": "headless-builder-test",
    "apiApplicationToAPIEndpoints": [
      {
        "path": "/test1",
        "scope": "company",
        "externalReferenceCode": "test-endpoint-1",
        "name": "Test 1",
        "description": "description",
        "httpMethod": "get"
      },
      {
        "path": "/test2",
        "scope": "company",
        "externalReferenceCode": "test-endpoint-2",
        "name": "Test 2",
        "description": "description",
        "httpMethod": "get"
      }
    ],
    "applicationStatus": "published",
    "apiApplicationToAPISchemas": [
      {
        "externalReferenceCode": "test-schema",
        "mainObjectDefinitionERC": "L_API_ENDPOINT",
        "description": "description",
        "name": "Test Schema",
        "apiSchemaToAPIProperties": [
          {
            "objectFieldERC": "PATH",
            "name": "path",
            "description": "description"
          }
        ]
      }
    ]
  }'
  liferay-curl -X "PUT" "http://localhost:8080/o/headless-builder/schemas/by-external-reference-code/test-schema/responseAPISchemaToAPIEndpoints/test-endpoint-1"
  liferay-curl -X "PUT" "http://localhost:8080/o/headless-builder/schemas/by-external-reference-code/test-schema/responseAPISchemaToAPIEndpoints/test-endpoint-2"
  liferay-curl "http://localhost:8080/o/c/headless-builder-test/test1"
}

# :command.function
cliferay_curl_new_object_command() {

  # src/commands/curl/new-object.sh
  JSON=$(
    liferay-curl -X "PUT" "http://localhost:8080/o/object-admin/v1.0/object-definitions/by-external-reference-code/University" \
       -H 'Content-Type: application/json' \
       -d $'{
          "active": true,
          "status": {
            "code": 0
          },
          "objectFields": [
            {
              "DBType": "String",
              "indexed": true,
              "indexedLanguageId": "",
              "externalReferenceCode": "university-name",
              "listTypeDefinitionId": 0,
              "label": {
                "en_US": "University name"
              },
              "type": "String",
              "required": true,
              "system": false,
              "name": "universityName",
              "indexedAsKeyword": false
            }
          ],
          "objectValidationRules": [
            {
              "engineLabel": "Expression Builder",
              "active": true,
              "outputType": "fullValidation",
              "script": "universityName != \\"Harvard\\"",
              "externalReferenceCode": "f78318aa-e87f-06c2-821c-0275455fcd1f",
              "objectDefinitionExternalReferenceCode": "University",
              "system": false,
              "engine": "ddm",
              "objectValidationRuleSettings": [],
              "name": {
                  "en_US": "Test"
              },
              "errorLabel": {
                  "en_US": "We do not like Harvard"
              }
            }
          ],
          "panelCategoryKey": "control_panel.object",
          "pluralLabel": {
            "en-US": "Universities"
          },
          "portlet": true,
          "scope": "company",
          "label": {
            "en-US": "University"
          },
          "externalReferenceCode": "University",
          "name": "University"
        }'
  )

  echo $JSON | jq

  if [[ $(echo $JSON | jq '.status.code') != 0 ]]; then
    liferay-curl -X "POST" "http://localhost:8080/o/object-admin/v1.0/object-definitions/$(echo $JSON | jq '.id')/publish"
  fi

  liferay-curl -X "PUT" "http://localhost:8080/o/c/universities/by-external-reference-code/Oxford" \
       -H 'Content-Type: application/json' \
       -d $'{
      "universityName": "Oxford"
    }'

  liferay-curl -X "PUT" "http://localhost:8080/o/c/universities/by-external-reference-code/Cambridge" \
       -H 'Content-Type: application/json' \
       -d $'{
      "universityName": "Cambridge"
    }'
}

# :command.function
cliferay_curl_batch_import_command() {

  # src/commands/curl/batch-import.sh
  liferay-curl -X POST -H "Content-Type: application/json" -d '[{"universityName": "UAM"}]' http://localhost:8080/o/c/universities/batch | jq -r '.id' | xargs -I {} curl -X GET -u test@liferay.com:test -H "Content-Type: application/json" http://localhost:8080/o/headless-batch-engine/v1.0/import-task/\{\} | jq
}

# :command.function
cliferay_backport_command() {

  # src/commands/backport.sh
  WHITE='\033[00;97m'
  BOLD_WHITE='\033[01;97m'
  NC='\033[0m' # No Color

  TEXT=${args["text"]}
  SOURCE_BRANCH=${args["--branch"]:-ce/master}

  COMMITS=$(git log $SOURCE_BRANCH --format="%H" --grep=^$TEXT | tac)

  echo -e "${BOLD_WHITE}Commits in chronological order:${NC}"
  echo ""

  git --no-pager show --no-patch --oneline $COMMITS
  echo ""

  echo -n -e "${BOLD_WHITE}Do you want to cherry pick all these commits? (y/n)${WHITE} "
  read answer
  echo -e "${NC}"

  if [[ "$answer" == "y" ]]; then
      git checkout -B $(git rev-parse --abbrev-ref HEAD)-$TEXT
      git cherry-pick $COMMITS
  else
      echo "No problem. Try some other time."
  fi

}

# :command.function
cliferay_jira_command() {

  # src/commands/jira.sh
  TICKETS=$(echo "${args["ticket"]:-$(git rev-parse --abbrev-ref HEAD)}" | cliferay tickets)
  if [ -n "$TICKETS" ]; then
      echo "$TICKETS" | xargs npx -y open-cli
  else
      cliferay jira --help
  fi
}

# :command.function
cliferay_init_command() {

  # src/commands/init.sh
  #gh auth login --hostname github.com
  jira init --force --installation cloud --server "https://liferay.atlassian.net" --project LPD --board None --login "${args["--email"]}"

}

# :command.function
cliferay_poshi_command() {

  # src/commands/poshi.sh
  cd $(cliferay folder)
  HOSTNAME=localhost cliferay ant -f build-test.xml run-selenium-test -Dtest.class=${args["test"]}
}

# :command.function
cliferay_playwright_install_command() {

  # src/commands/playwright/install.sh
  cd $(cliferay folder)/modules/test/playwright
  npm install
}

# :command.function
cliferay_playwright_test_command() {

  # src/commands/playwright/test.sh
  cd $(cliferay folder)/modules/test/playwright
  npm run playwright test -- ${other_args[*]}
}

# :command.function
cliferay_playwright_ui_command() {

  # src/commands/playwright/ui.sh
  cd $(cliferay folder)/modules/test/playwright
  npm run playwright test -- --ui
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        cliferay_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter

  env_var_names+=("LIFERAY_HOME")
  env_var_names+=("DEBUG")
  if [[ -z "${LIFERAY_HOME:-}" ]]; then
    printf "missing required environment variable: LIFERAY_HOME\n" >&2
    exit 1
  fi

  # :command.dependencies_filter
  if command -v gh >/dev/null 2>&1; then
    deps['gh']="$(command -v gh | head -n1)"
  else
    printf "missing dependency: gh\n" >&2
    printf "%s\n" "install it from https://cli.github.com" >&2
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    update)
      action="update"
      shift
      cliferay_update_parse_requirements "$@"
      shift $#
      ;;

    sync)
      action="sync"
      shift
      cliferay_sync_parse_requirements "$@"
      shift $#
      ;;

    brian)
      action="brian"
      shift
      cliferay_brian_parse_requirements "$@"
      shift $#
      ;;

    set-ticket)
      action="set-ticket"
      shift
      cliferay_set_ticket_parse_requirements "$@"
      shift $#
      ;;

    owner)
      action="owner"
      shift
      cliferay_owner_parse_requirements "$@"
      shift $#
      ;;

    tickets)
      action="tickets"
      shift
      cliferay_tickets_parse_requirements "$@"
      shift $#
      ;;

    stats)
      action="stats"
      shift
      cliferay_stats_parse_requirements "$@"
      shift $#
      ;;

    build)
      action="build"
      shift
      cliferay_build_parse_requirements "$@"
      shift $#
      ;;

    ij)
      action="ij"
      shift
      cliferay_ij_parse_requirements "$@"
      shift $#
      ;;

    gw)
      action="gw"
      shift
      cliferay_gw_parse_requirements "$@"
      shift $#
      ;;

    ant)
      action="ant"
      shift
      cliferay_ant_parse_requirements "$@"
      shift $#
      ;;

    changed-modules | cm)
      action="changed-modules"
      shift
      cliferay_changed_modules_parse_requirements "$@"
      shift $#
      ;;

    super-deploy | sd)
      action="super-deploy"
      shift
      cliferay_super_deploy_parse_requirements "$@"
      shift $#
      ;;

    format-source | sf)
      action="format-source"
      shift
      cliferay_format_source_parse_requirements "$@"
      shift $#
      ;;

    deploy | d)
      action="deploy"
      shift
      cliferay_deploy_parse_requirements "$@"
      shift $#
      ;;

    baseline)
      action="baseline"
      shift
      cliferay_baseline_parse_requirements "$@"
      shift $#
      ;;

    build-rest)
      action="build-rest"
      shift
      cliferay_build_rest_parse_requirements "$@"
      shift $#
      ;;

    run)
      action="run"
      shift
      cliferay_run_parse_requirements "$@"
      shift $#
      ;;

    gogo)
      action="gogo"
      shift
      cliferay_gogo_parse_requirements "$@"
      shift $#
      ;;

    kill)
      action="kill"
      shift
      cliferay_kill_parse_requirements "$@"
      shift $#
      ;;

    nuke)
      action="nuke"
      shift
      cliferay_nuke_parse_requirements "$@"
      shift $#
      ;;

    tomcat-folder)
      action="tomcat-folder"
      shift
      cliferay_tomcat_folder_parse_requirements "$@"
      shift $#
      ;;

    elastic-search)
      action="elastic-search"
      shift
      cliferay_elastic_search_parse_requirements "$@"
      shift $#
      ;;

    db-name)
      action="db-name"
      shift
      cliferay_db_name_parse_requirements "$@"
      shift $#
      ;;

    morning)
      action="morning"
      shift
      cliferay_morning_parse_requirements "$@"
      shift $#
      ;;

    folder)
      action="folder"
      shift
      cliferay_folder_parse_requirements "$@"
      shift $#
      ;;

    completions)
      action="completions"
      shift
      cliferay_completions_parse_requirements "$@"
      shift $#
      ;;

    aliases)
      action="aliases"
      shift
      cliferay_aliases_parse_requirements "$@"
      shift $#
      ;;

    curl)
      action="curl"
      shift
      cliferay_curl_parse_requirements "$@"
      shift $#
      ;;

    backport | b)
      action="backport"
      shift
      cliferay_backport_parse_requirements "$@"
      shift $#
      ;;

    jira)
      action="jira"
      shift
      cliferay_jira_parse_requirements "$@"
      shift $#
      ;;

    init)
      action="init"
      shift
      cliferay_init_parse_requirements "$@"
      shift $#
      ;;

    poshi)
      action="poshi"
      shift
      cliferay_poshi_parse_requirements "$@"
      shift $#
      ;;

    playwright | pw)
      action="playwright"
      shift
      cliferay_playwright_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      cliferay_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_update_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_update_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="update"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_sync_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_sync_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="sync"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_brian_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_brian_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="brian"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['pr']+x} ]]; then
          args['pr']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['pr']+x} ]]; then
    printf "missing required argument: PR\nusage: cliferay brian PR\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
cliferay_set_ticket_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_set_ticket_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="set-ticket"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --branch | -b)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--branch']="$2"
          shift
          shift
        else
          printf "%s\n" "--branch requires an argument: --branch, -b BRANCH" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['ticket']+x} ]]; then
          args['ticket']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['ticket']+x} ]]; then
    printf "missing required argument: TICKET\nusage: cliferay set-ticket TICKET [OPTIONS]\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
cliferay_owner_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_owner_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="owner"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['path']+x} ]]; then
          args['path']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args['path']:-} ]] || args['path']="."

}

# :command.parse_requirements
cliferay_tickets_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_tickets_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="tickets"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_stats_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_stats_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    users)
      action="users"
      shift
      cliferay_stats_users_parse_requirements "$@"
      shift $#
      ;;

    years)
      action="years"
      shift
      cliferay_stats_years_parse_requirements "$@"
      shift $#
      ;;

    ranking)
      action="ranking"
      shift
      cliferay_stats_ranking_parse_requirements "$@"
      shift $#
      ;;

    tickets)
      action="tickets"
      shift
      cliferay_stats_tickets_parse_requirements "$@"
      shift $#
      ;;

    commits)
      action="commits"
      shift
      cliferay_stats_commits_parse_requirements "$@"
      shift $#
      ;;

    review)
      action="review"
      shift
      cliferay_stats_review_parse_requirements "$@"
      shift $#
      ;;

    assigned)
      action="assigned"
      shift
      cliferay_stats_assigned_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      cliferay_stats_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_stats_users_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_stats_users_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    jira)
      action="jira"
      shift
      cliferay_stats_users_jira_parse_requirements "$@"
      shift $#
      ;;

    emails)
      action="emails"
      shift
      cliferay_stats_users_emails_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      cliferay_stats_users_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_stats_users_jira_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_stats_users_jira_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="stats users jira"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['user']+x} ]]; then
          args['user']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['user']+x} ]]; then
    printf "missing required argument: USER\nusage: cliferay stats users jira USER\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
cliferay_stats_users_emails_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_stats_users_emails_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="stats users emails"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['user']+x} ]]; then
          args['user']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['user']+x} ]]; then
    printf "missing required argument: USER\nusage: cliferay stats users emails USER\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
cliferay_stats_years_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_stats_years_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="stats years"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['user']+x} ]]; then
          args['user']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_stats_ranking_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_stats_ranking_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="stats ranking"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_repeatable
        # :argument.case_repeatable
        escaped="$(printf '%q' "$1")"
        if [[ -z ${args['emails']+x} ]]; then
          args['emails']="$escaped"
        else
          args['emails']="${args['emails']} $escaped"

        fi
        shift

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_stats_tickets_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_stats_tickets_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="stats tickets"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['user']+x} ]]; then
          args['user']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_stats_commits_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_stats_commits_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="stats commits"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['user']+x} ]]; then
          args['user']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_stats_review_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_stats_review_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="stats review"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['user']+x} ]]; then
          args['user']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_stats_assigned_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_stats_assigned_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="stats assigned"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['user']+x} ]]; then
          args['user']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_build_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_build_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="build"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_ij_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_ij_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="ij"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_gw_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_gw_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="gw"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --)
        shift
        other_args+=("$@")
        break
        ;;

      -?*)
        other_args+=("$1")
        shift
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_catch_all
        other_args+=("$1")
        shift

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_ant_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_ant_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="ant"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --)
        shift
        other_args+=("$@")
        break
        ;;

      -?*)
        other_args+=("$1")
        shift
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_catch_all
        other_args+=("$1")
        shift

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_changed_modules_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_changed_modules_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="changed-modules"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --branch | -b)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--branch']="$2"
          shift
          shift
        else
          printf "%s\n" "--branch requires an argument: --branch, -b BRANCH" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_super_deploy_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_super_deploy_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="super-deploy"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --branch | -b)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--branch']="$2"
          shift
          shift
        else
          printf "%s\n" "--branch requires an argument: --branch, -b BRANCH" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_format_source_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_format_source_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="format-source"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_deploy_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_deploy_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="deploy"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_baseline_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_baseline_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="baseline"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_build_rest_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_build_rest_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="build-rest"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_run_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_run_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="run"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['command']+x} ]]; then
          args['command']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_gogo_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_gogo_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="gogo"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --)
        shift
        other_args+=("$@")
        break
        ;;

      -?*)
        other_args+=("$1")
        shift
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_catch_all
        other_args+=("$1")
        shift

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_kill_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_kill_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="kill"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_nuke_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_nuke_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="nuke"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_tomcat_folder_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_tomcat_folder_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="tomcat-folder"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_elastic_search_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_elastic_search_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v jq >/dev/null 2>&1; then
    deps['jq']="$(command -v jq | head -n1)"
  else
    printf "missing dependency: jq\n" >&2
    printf "%s\n" "install it from https://jqlang.github.io/jq" >&2
    exit 1
  fi

  # :command.command_filter
  action="elastic-search"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_db_name_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_db_name_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="db-name"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_morning_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_morning_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="morning"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --no-nuke)

        # :flag.case_no_arg
        args['--no-nuke']=1
        shift
        ;;

      # :flag.case
      --force | -f)

        # :flag.case_no_arg
        args['--force']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_folder_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_folder_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="folder"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_completions_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_completions_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="completions"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_aliases_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_aliases_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="aliases"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_curl_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_curl_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v jq >/dev/null 2>&1; then
    deps['jq']="$(command -v jq | head -n1)"
  else
    printf "missing dependency: jq\n" >&2
    printf "%s\n" "install it from https://jqlang.github.io/jq" >&2
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    new-instance)
      action="new-instance"
      shift
      cliferay_curl_new_instance_parse_requirements "$@"
      shift $#
      ;;

    new-api)
      action="new-api"
      shift
      cliferay_curl_new_api_parse_requirements "$@"
      shift $#
      ;;

    new-object)
      action="new-object"
      shift
      cliferay_curl_new_object_parse_requirements "$@"
      shift $#
      ;;

    batch-import)
      action="batch-import"
      shift
      cliferay_curl_batch_import_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      cliferay_curl_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_curl_new_instance_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_curl_new_instance_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="curl new-instance"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['host']+x} ]]; then
          args['host']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['host']+x} ]]; then
    printf "missing required argument: HOST\nusage: cliferay curl new-instance HOST\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
cliferay_curl_new_api_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_curl_new_api_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="curl new-api"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_curl_new_object_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_curl_new_object_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="curl new-object"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_curl_batch_import_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_curl_batch_import_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="curl batch-import"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_backport_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_backport_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="backport"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --branch | -b)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--branch']="$2"
          shift
          shift
        else
          printf "%s\n" "--branch requires an argument: --branch, -b BRANCH" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['text']+x} ]]; then
          args['text']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['text']+x} ]]; then
    printf "missing required argument: TEXT\nusage: cliferay backport TEXT [OPTIONS]\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
cliferay_jira_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_jira_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="jira"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['ticket']+x} ]]; then
          args['ticket']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_init_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v jira >/dev/null 2>&1; then
    deps['jira']="$(command -v jira | head -n1)"
  else
    printf "missing dependency: jira\n" >&2
    printf "%s\n" "install it from https://github.com/ankitpokhrel/jira-cli/wiki/Installation" >&2
    exit 1
  fi

  # :command.command_filter
  action="init"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --email)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--email']="$2"
          shift
          shift
        else
          printf "%s\n" "--email requires an argument: --email EMAIL" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.required_flags_filter
  if [[ -z ${args['--email']+x} ]]; then
    printf "missing required flag: --email EMAIL\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
cliferay_poshi_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_poshi_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="poshi"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['test']+x} ]]; then
          args['test']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['test']+x} ]]; then
    printf "missing required argument: TEST\nusage: cliferay poshi TEST\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
cliferay_playwright_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_playwright_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    install | i)
      action="install"
      shift
      cliferay_playwright_install_parse_requirements "$@"
      shift $#
      ;;

    test | t)
      action="test"
      shift
      cliferay_playwright_test_parse_requirements "$@"
      shift $#
      ;;

    ui)
      action="ui"
      shift
      cliferay_playwright_ui_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      cliferay_playwright_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_playwright_install_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_playwright_install_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="playwright install"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_playwright_test_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_playwright_test_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="playwright test"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --)
        shift
        other_args+=("$@")
        break
        ;;

      -?*)
        other_args+=("$1")
        shift
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_catch_all
        other_args+=("$1")
        shift

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_playwright_ui_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        cliferay_playwright_ui_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="playwright ui"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.user_hooks
before_hook() {
  # src/before.sh
  if [[ "${DEBUG}" == 'true' ]]; then
    set -x
  fi
}

# :command.initialize
initialize() {
  version="1.0.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"
  before_hook

  case "$action" in
    "update") cliferay_update_command ;;
    "sync") cliferay_sync_command ;;
    "brian") cliferay_brian_command ;;
    "set-ticket") cliferay_set_ticket_command ;;
    "owner") cliferay_owner_command ;;
    "tickets") cliferay_tickets_command ;;
    "stats") cliferay_stats_command ;;
    "stats users") cliferay_stats_users_command ;;
    "stats users jira") cliferay_stats_users_jira_command ;;
    "stats users emails") cliferay_stats_users_emails_command ;;
    "stats years") cliferay_stats_years_command ;;
    "stats ranking") cliferay_stats_ranking_command ;;
    "stats tickets") cliferay_stats_tickets_command ;;
    "stats commits") cliferay_stats_commits_command ;;
    "stats review") cliferay_stats_review_command ;;
    "stats assigned") cliferay_stats_assigned_command ;;
    "build") cliferay_build_command ;;
    "ij") cliferay_ij_command ;;
    "gw") cliferay_gw_command ;;
    "ant") cliferay_ant_command ;;
    "changed-modules") cliferay_changed_modules_command ;;
    "super-deploy") cliferay_super_deploy_command ;;
    "format-source") cliferay_format_source_command ;;
    "deploy") cliferay_deploy_command ;;
    "baseline") cliferay_baseline_command ;;
    "build-rest") cliferay_build_rest_command ;;
    "run") cliferay_run_command ;;
    "gogo") cliferay_gogo_command ;;
    "kill") cliferay_kill_command ;;
    "nuke") cliferay_nuke_command ;;
    "tomcat-folder") cliferay_tomcat_folder_command ;;
    "elastic-search") cliferay_elastic_search_command ;;
    "db-name") cliferay_db_name_command ;;
    "morning") cliferay_morning_command ;;
    "folder") cliferay_folder_command ;;
    "completions") cliferay_completions_command ;;
    "aliases") cliferay_aliases_command ;;
    "curl") cliferay_curl_command ;;
    "curl new-instance") cliferay_curl_new_instance_command ;;
    "curl new-api") cliferay_curl_new_api_command ;;
    "curl new-object") cliferay_curl_new_object_command ;;
    "curl batch-import") cliferay_curl_batch_import_command ;;
    "backport") cliferay_backport_command ;;
    "jira") cliferay_jira_command ;;
    "init") cliferay_init_command ;;
    "poshi") cliferay_poshi_command ;;
    "playwright") cliferay_playwright_command ;;
    "playwright install") cliferay_playwright_install_command ;;
    "playwright test") cliferay_playwright_test_command ;;
    "playwright ui") cliferay_playwright_ui_command ;;
  esac
}

initialize
run "$@"
