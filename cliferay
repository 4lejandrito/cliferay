#!/usr/bin/env bash
# This script was generated by bashly 1.0.7 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
cliferay_usage() {
  if [[ -n $long_usage ]]; then
    printf "cliferay\n"
    echo

    printf "  Daily scripts to work with Liferay\n  \n  The scripts can be run from any folder:\n    - If the folder is outside the repo it will use LIFERAY_HOME.\n    - If the folder is inside the repo it will use that repo. \n    \n  For example every day I open my terminal and type:\n  \n    > cliferay morning\n  \n  and it will just work no matter which folder I am in.\n"
    echo

  else
    printf "cliferay - Daily scripts to work with Liferay\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cliferay COMMAND\n"
  printf "  cliferay [COMMAND] --help | -h\n"
  printf "  cliferay --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Git Commands:"
  printf "  %s   Sync fork and local copy with upstream\n" "sync           "
  printf "  %s   Forward an existing PR to Brian and close it\n" "brian          "
  echo
  printf "%s\n" "Build Commands:"
  printf "  %s   Run ant all\n" "build          "
  printf "  %s   Run liferay-intellij\n" "ij             "
  printf "  %s   Run gradlew\n" "gw             "
  printf "  %s   Run ant\n" "ant            "
  echo
  printf "%s\n" "Module Commands:"
  printf "  %s   List changed modules\n" "changed-modules"
  printf "  %s   Deploy changed modules\n" "super-deploy   "
  printf "  %s   Run SF globally\n" "format-source  "
  printf "  %s   Deploy the current folder\n" "deploy         "
  printf "  %s   Run a Poshi test\n" "poshi          "
  echo
  printf "%s\n" "Server Commands:"
  printf "  %s   Start the server\n" "run            "
  printf "  %s   Kill the server\n" "kill           "
  printf "  %s   Delete all persisted data\n" "nuke           "
  printf "  %s   Print the current tomcat folder\n" "tomcat-folder  "
  echo
  printf "%s\n" "Commands:"
  printf "  %s   Sync, build, ij and run\n" "morning        "
  printf "  %s   Print the source folder\n" "folder         "
  printf "  %s   Print completions script\n" "completions    "
  printf "  %s   Send predefined HTTP requests to a running portal\n" "curl           "
  printf "  %s   Backport commits to other branches\n" "backport       "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "LIFERAY_HOME (required)"
    printf "    Location of your main liferay-portal clone\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "DEBUG"
    printf "    Set to true to enable echoing of all the commands being run\n"
    echo

  fi
}

# :command.usage
cliferay_sync_usage() {
  if [[ -n $long_usage ]]; then
    printf "cliferay sync - Sync fork and local copy with upstream\n"
    echo

  else
    printf "cliferay sync - Sync fork and local copy with upstream\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cliferay sync\n"
  printf "  cliferay sync --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_brian_usage() {
  if [[ -n $long_usage ]]; then
    printf "cliferay brian - Forward an existing PR to Brian and close it\n"
    echo

  else
    printf "cliferay brian - Forward an existing PR to Brian and close it\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cliferay brian PR\n"
  printf "  cliferay brian --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "PR"
    printf "    Link to the GitHub PR.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  cliferay brian https://github.com/liferay-headless/liferay-portal/pull/1433\n"
    echo

  fi
}

# :command.usage
cliferay_build_usage() {
  if [[ -n $long_usage ]]; then
    printf "cliferay build - Run ant all\n"
    echo

  else
    printf "cliferay build - Run ant all\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cliferay build\n"
  printf "  cliferay build --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_ij_usage() {
  if [[ -n $long_usage ]]; then
    printf "cliferay ij - Run liferay-intellij\n"
    echo

  else
    printf "cliferay ij - Run liferay-intellij\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cliferay ij\n"
  printf "  cliferay ij --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_gw_usage() {
  if [[ -n $long_usage ]]; then
    printf "cliferay gw - Run gradlew\n"
    echo

  else
    printf "cliferay gw - Run gradlew\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cliferay gw [...]\n"
  printf "  cliferay gw --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_ant_usage() {
  if [[ -n $long_usage ]]; then
    printf "cliferay ant - Run ant\n"
    echo

  else
    printf "cliferay ant - Run ant\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cliferay ant [...]\n"
  printf "  cliferay ant --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_changed_modules_usage() {
  if [[ -n $long_usage ]]; then
    printf "cliferay changed-modules - List changed modules\n"
    echo

  else
    printf "cliferay changed-modules - List changed modules\n"
    echo

  fi

  printf "Alias: cm\n"
  echo

  printf "%s\n" "Usage:"
  printf "  cliferay changed-modules [OPTIONS]\n"
  printf "  cliferay changed-modules --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--branch, -b BRANCH"
    printf "    Branch to compare to\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_super_deploy_usage() {
  if [[ -n $long_usage ]]; then
    printf "cliferay super-deploy - Deploy changed modules\n"
    echo

  else
    printf "cliferay super-deploy - Deploy changed modules\n"
    echo

  fi

  printf "Alias: sd\n"
  echo

  printf "%s\n" "Usage:"
  printf "  cliferay super-deploy [OPTIONS]\n"
  printf "  cliferay super-deploy --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--branch, -b BRANCH"
    printf "    Branch to compare to\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_format_source_usage() {
  if [[ -n $long_usage ]]; then
    printf "cliferay format-source - Run SF globally\n"
    echo

  else
    printf "cliferay format-source - Run SF globally\n"
    echo

  fi

  printf "Alias: sf\n"
  echo

  printf "%s\n" "Usage:"
  printf "  cliferay format-source\n"
  printf "  cliferay format-source --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_deploy_usage() {
  if [[ -n $long_usage ]]; then
    printf "cliferay deploy - Deploy the current folder\n"
    echo

  else
    printf "cliferay deploy - Deploy the current folder\n"
    echo

  fi

  printf "Alias: d\n"
  echo

  printf "%s\n" "Usage:"
  printf "  cliferay deploy\n"
  printf "  cliferay deploy --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_poshi_usage() {
  if [[ -n $long_usage ]]; then
    printf "cliferay poshi - Run a Poshi test\n"
    echo

  else
    printf "cliferay poshi - Run a Poshi test\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cliferay poshi TEST\n"
  printf "  cliferay poshi --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "TEST"
    printf "    The test to run.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  cliferay poshi GeneratePathStructureForEndpoints#CanValidatePathInAPIEndpoint\n"
    echo

  fi
}

# :command.usage
cliferay_run_usage() {
  if [[ -n $long_usage ]]; then
    printf "cliferay run - Start the server\n"
    echo

  else
    printf "cliferay run - Start the server\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cliferay run\n"
  printf "  cliferay run --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_kill_usage() {
  if [[ -n $long_usage ]]; then
    printf "cliferay kill - Kill the server\n"
    echo

  else
    printf "cliferay kill - Kill the server\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cliferay kill\n"
  printf "  cliferay kill --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_nuke_usage() {
  if [[ -n $long_usage ]]; then
    printf "cliferay nuke - Delete all persisted data\n"
    echo

  else
    printf "cliferay nuke - Delete all persisted data\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cliferay nuke\n"
  printf "  cliferay nuke --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_tomcat_folder_usage() {
  if [[ -n $long_usage ]]; then
    printf "cliferay tomcat-folder - Print the current tomcat folder\n"
    echo

  else
    printf "cliferay tomcat-folder - Print the current tomcat folder\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cliferay tomcat-folder\n"
  printf "  cliferay tomcat-folder --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_morning_usage() {
  if [[ -n $long_usage ]]; then
    printf "cliferay morning - Sync, build, ij and run\n"
    echo

  else
    printf "cliferay morning - Sync, build, ij and run\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cliferay morning\n"
  printf "  cliferay morning --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_folder_usage() {
  if [[ -n $long_usage ]]; then
    printf "cliferay folder - Print the source folder\n"
    echo

  else
    printf "cliferay folder - Print the source folder\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cliferay folder\n"
  printf "  cliferay folder --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_completions_usage() {
  if [[ -n $long_usage ]]; then
    printf "cliferay completions - Print completions script\n"
    echo

  else
    printf "cliferay completions - Print completions script\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cliferay completions\n"
  printf "  cliferay completions --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_curl_usage() {
  if [[ -n $long_usage ]]; then
    printf "cliferay curl - Send predefined HTTP requests to a running portal\n"
    echo

  else
    printf "cliferay curl - Send predefined HTTP requests to a running portal\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cliferay curl COMMAND\n"
  printf "  cliferay curl [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Create a new instance\n" "new-instance"
  printf "  %s   Create a new API Builder API\n" "new-api     "
  printf "  %s   Create a new object definition with some entries\n" "new-object  "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_curl_new_instance_usage() {
  if [[ -n $long_usage ]]; then
    printf "cliferay curl new-instance - Create a new instance\n"
    echo

  else
    printf "cliferay curl new-instance - Create a new instance\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cliferay curl new-instance HOST\n"
  printf "  cliferay curl new-instance --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "HOST"
    printf "    The virtual host.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  cliferay curl new-instance www.able.com\n"
    echo

  fi
}

# :command.usage
cliferay_curl_new_api_usage() {
  if [[ -n $long_usage ]]; then
    printf "cliferay curl new-api - Create a new API Builder API\n"
    echo

  else
    printf "cliferay curl new-api - Create a new API Builder API\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cliferay curl new-api\n"
  printf "  cliferay curl new-api --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_curl_new_object_usage() {
  if [[ -n $long_usage ]]; then
    printf "cliferay curl new-object - Create a new object definition with some entries\n"
    echo

  else
    printf "cliferay curl new-object - Create a new object definition with some entries\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cliferay curl new-object\n"
  printf "  cliferay curl new-object --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cliferay_backport_usage() {
  if [[ -n $long_usage ]]; then
    printf "cliferay backport - Backport commits to other branches\n"
    echo

  else
    printf "cliferay backport - Backport commits to other branches\n"
    echo

  fi

  printf "Alias: b\n"
  echo

  printf "%s\n" "Usage:"
  printf "  cliferay backport TEXT [OPTIONS]\n"
  printf "  cliferay backport --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--branch, -b BRANCH"
    printf "    Source branch\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "TEXT"
    printf "    Text to filter commits by (LPS-12345).\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.user_lib
# src/lib/functions.sh
function get-module() {
	while read line
	do
		if test -f $line/bnd.bnd; then
			echo "$line";
		elif [ "$line" != "." ]; then
			(dirname $line | get-module)
		fi
	done
}

function run-stdin() {
	set +e
	while read line
	do
		echo "" | (cd $(cliferay folder)/$line; $*)
	done
	set -e
}

function liferay-get-modules() {
	(cd $(cliferay folder) && $* --name-only | get-module | uniq)
}

function liferay-curl() {
	curl --no-progress-meter -u 'test@liferay.com:test' "$@" | jq
}

# src/lib/send_completions.sh
send_completions() {
  echo $'# cliferay completion                                      -*- shell-script -*-'
  echo $''
  echo $'# This bash completions script was generated by'
  echo $'# completely (https://github.com/dannyben/completely)'
  echo $'# Modifying it manually is not recommended'
  echo $''
  echo $'_cliferay_completions_filter() {'
  echo $'  local words="$1"'
  echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
  echo $'  local result=()'
  echo $''
  echo $'  if [[ "${cur:0:1}" == "-" ]]; then'
  echo $'    echo "$words"'
  echo $'  '
  echo $'  else'
  echo $'    for word in $words; do'
  echo $'      [[ "${word:0:1}" != "-" ]] && result+=("$word")'
  echo $'    done'
  echo $''
  echo $'    echo "${result[*]}"'
  echo $''
  echo $'  fi'
  echo $'}'
  echo $''
  echo $'_cliferay_completions() {'
  echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
  echo $'  local compwords=("${COMP_WORDS[@]:1:$COMP_CWORD-1}")'
  echo $'  local compline="${compwords[*]}"'
  echo $''
  echo $'  case "$compline" in'
  echo $'    \'curl new-instance\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'changed-modules\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cliferay_completions_filter "--branch --help -b -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'curl new-object\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'format-source\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'tomcat-folder\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'super-deploy\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cliferay_completions_filter "--branch --help -b -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'curl new-api\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'completions\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'backport\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cliferay_completions_filter "--branch --help -b -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'morning\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'folder\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'deploy\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'build\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'poshi\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'brian\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'curl\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cliferay_completions_filter "--help -h new-api new-instance new-object")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'sync\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'kill\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'nuke\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'run\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'ant\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'sf\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'sd\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cliferay_completions_filter "--branch --help -b -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'gw\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'ij\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'cm\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cliferay_completions_filter "--branch --help -b -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'d\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cliferay_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'b\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cliferay_completions_filter "--branch --help -b -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    *)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cliferay_completions_filter "--help --version -h -v ant b backport brian build changed-modules cm completions curl d deploy folder format-source gw ij kill morning nuke poshi run sd sf super-deploy sync tomcat-folder")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'  esac'
  echo $'} &&'
  echo $'complete -F _cliferay_completions cliferay'
  echo $''
  echo $'# ex: filetype=sh'
}

# :command.command_functions
# :command.function
cliferay_sync_command() {
  # src/commands/sync.sh
  cd $(cliferay folder)
  gh repo sync $(gh repo view --json nameWithOwner -q ".nameWithOwner")
  gh repo sync
  git push

}

# :command.function
cliferay_brian_command() {
  # src/commands/brian.sh
  PR=${args["pr"]}
  echo "Checking out $PR"
  gh pr checkout -f $PR
  echo "Creating Brian's PR from $PR"
  BRANCH=$(git rev-parse --abbrev-ref HEAD)-brian
  git branch -D $BRANCH &>/dev/null || true
  git checkout -b $BRANCH
  git push -f origin $BRANCH
  git branch -u origin/$BRANCH
  BRIAN_PR=$(gh pr create --title "$(gh pr view $PR --json title --jq .title)" --body "$(gh pr view $PR --json body --jq .body)" -R brianchandotcom/liferay-portal)
  sleep 2
  gh pr comment $BRIAN_PR --body "ci:reopen"
  echo "Closing $PR"
  gh pr comment $PR --body "$BRIAN_PR"
  gh pr close $PR
  echo $BRIAN_PR
}

# :command.function
cliferay_build_command() {
  # src/commands/build.sh
  cd $(cliferay folder)
  cliferay ant all

}

# :command.function
cliferay_ij_command() {
  # src/commands/ij.sh
  cd $(cliferay folder)
  if [ ! -d "../liferay-intellij" ]; then
      gh repo clone holatuwol/liferay-intellij "../liferay-intellij"
  fi
  ../liferay-intellij/intellij

}

# :command.function
cliferay_gw_command() {
  # src/commands/gw.sh
  $(cliferay folder)/gradlew ${other_args[*]}
}

# :command.function
cliferay_ant_command() {
  # src/commands/ant.sh
  ANT_OPTS=-Xmx4096m ant ${other_args[*]}
}

# :command.function
cliferay_changed_modules_command() {
  # src/commands/changed-modules.sh
  cd $(cliferay folder)
  liferay-get-modules git diff --name-only ${args["--branch"]:-master}
}

# :command.function
cliferay_super_deploy_command() {
  # src/commands/super-deploy.sh
  cd $(cliferay folder)
  cliferay changed-modules --branch ${args["--branch"]:-master} | run-stdin cliferay deploy
  cliferay changed-modules --branch ${args["--branch"]:-master} | run-stdin cliferay deploy
}

# :command.function
cliferay_format_source_command() {
  # src/commands/format-source.sh
  cd $(cliferay folder)/portal-impl
  ANT_OPTS=-Xmx4096m ant format-source-current-branch
}

# :command.function
cliferay_deploy_command() {
  # src/commands/deploy.sh
  if [[ "$PWD" = */portal-test ]]; then
      cliferay ant deploy install-portal-snapshot && cp ../../bundles/osgi/test/com.liferay.portal.test.jar ../../bundles/osgi/modules
  elif [[ "$PWD" = */portal-kernel ]]; then
      cliferay ant deploy install-portal-snapshot
  elif ! [[ "$PWD" = */*-test ]]; then
      cliferay gw -a depl
  fi
}

# :command.function
cliferay_poshi_command() {
  # src/commands/poshi.sh
  cd $(cliferay folder)
  HOSTNAME=localhost cliferay ant -f build-test.xml run-selenium-test -Dtest.class=${args["test"]}
}

# :command.function
cliferay_run_command() {
  # src/commands/run.sh
  $(cliferay tomcat-folder)/bin/catalina.sh jpda run

}

# :command.function
cliferay_kill_command() {
  # src/commands/kill.sh
  pgrep -f tomcat | xargs kill -9
}

# :command.function
cliferay_nuke_command() {
  # src/commands/nuke.sh
  cd $(cliferay folder)
  rm -rf ../bundles/elasticsearch7 ../bundles/data ../bundles/osgi/state .$(cliferay tomcat-folder)/work/Catalina
  echo "drop database lportal; create database lportal CHARACTER SET utf8mb4 COLLATE utf8mb4_bin" | mysql -uroot -proot
}

# :command.function
cliferay_tomcat_folder_command() {
  # src/commands/tomcat-folder.sh
  cd $(cliferay folder)/../bundles
  ls -d "$PWD/"** | grep tomcat | tail -n 1
}

# :command.function
cliferay_morning_command() {
  # src/commands/morning.sh
  cliferay sync
  cliferay build
  cliferay ij
  cliferay run

}

# :command.function
cliferay_folder_command() {
  # src/commands/folder.sh
  root=$(git rev-parse --show-toplevel 2> /dev/null || true)
  if [[ $root == *liferay-portal* ]]; then
      echo $root
  else
      echo $LIFERAY_HOME
  fi

}

# :command.function
cliferay_completions_command() {
  # src/commands/completions.sh
  send_completions
}

# :command.function
cliferay_curl_new_instance_command() {
  # src/commands/curl/new-instance.sh
  HOST=${args["host"]}
  liferay-curl -X 'POST' \
    'http://localhost:8080/o/headless-portal-instances/v1.0/portal-instances' \
    -H 'accept: application/json' \
    -H 'Content-Type: application/json' \
    -d '{
    "domain": "liferay.com",
    "portalInstanceId": "'$HOST'",
    "virtualHost": "'$HOST'"
  }'
}

# :command.function
cliferay_curl_new_api_command() {
  # src/commands/curl/new-api.sh
  cliferay curl new-object
  liferay-curl -X "DELETE" "http://localhost:8080/o/headless-builder/applications/by-external-reference-code/my-application"
  liferay-curl -X "POST" "http://localhost:8080/o/headless-builder/applications" \
       -H 'Content-Type: application/json' \
       -d $'{
    "baseURL": "my-application",
    "title": "My application",
    "externalReferenceCode": "my-application",
    "apiApplicationToAPIEndpoints": [
      {
        "path": "/my-endpoint",
        "scope": "company",
        "externalReferenceCode": "my-endpoint",
        "name": "name",
        "description": "description",
        "httpMethod": "get"
      }
    ],
    "applicationStatus": "published",
    "apiApplicationToAPISchemas": [
      {
        "externalReferenceCode": "my-schema",
        "mainObjectDefinitionERC": "University",
        "description": "description",
        "name": "MySchema",
        "apiSchemaToAPIProperties": [
          {
            "objectFieldERC": "university-name",
            "name": "name",
            "description": "description"
          }
        ]
      }
    ]
  }'
  liferay-curl -X "PUT" "http://localhost:8080/o/headless-builder/schemas/by-external-reference-code/my-schema/responseAPISchemaToAPIEndpoints/my-endpoint"
  liferay-curl "http://localhost:8080/o/c/my-application/my-endpoint"
}

# :command.function
cliferay_curl_new_object_command() {
  # src/commands/curl/new-object.sh
  JSON=$(
    liferay-curl -X "PUT" "http://localhost:8080/o/object-admin/v1.0/object-definitions/by-external-reference-code/University" \
       -H 'Content-Type: application/json' \
       -d $'{
          "active": true,
          "status": {
            "code": 0
          },
          "objectFields": [
            {
              "DBType": "String",
              "indexed": true,
              "indexedLanguageId": "",
              "externalReferenceCode": "university-name",
              "listTypeDefinitionId": 0,
              "label": {
                "en_US": "University name"
              },
              "type": "String",
              "required": true,
              "system": false,
              "name": "universityName",
              "indexedAsKeyword": false
            }
          ],
          "pluralLabel": {
            "en-US": "Universities"
          },
          "portlet": true,
          "scope": "company",
          "label": {
            "en-US": "University"
          },
          "externalReferenceCode": "University",
          "name": "University"
        }'
  )

  echo $JSON | jq

  if [[ $(echo $JSON | jq '.status.code') != 0 ]]; then
    liferay-curl -X "POST" "http://localhost:8080/o/object-admin/v1.0/object-definitions/$(echo $JSON | jq '.id')/publish"
  fi

  liferay-curl -X "PUT" "http://localhost:8080/o/c/universities/by-external-reference-code/Oxford" \
       -H 'Content-Type: application/json' \
       -d $'{
      "universityName": "Oxford"
    }'

  liferay-curl -X "PUT" "http://localhost:8080/o/c/universities/by-external-reference-code/Cambridge" \
       -H 'Content-Type: application/json' \
       -d $'{
      "universityName": "Cambridge"
    }'
}

# :command.function
cliferay_backport_command() {
  # src/commands/backport.sh
  WHITE='\033[00;97m'
  BOLD_WHITE='\033[01;97m'
  NC='\033[0m' # No Color

  TEXT=${args["text"]}
  SOURCE_BRANCH=${args["--branch"]:-ce/master}

  COMMITS=$(git log $SOURCE_BRANCH --format="%H" --grep=^$TEXT | tac)

  echo -e "${BOLD_WHITE}Commits in chronological order:${NC}"
  echo ""

  git --no-pager show --no-patch --oneline $COMMITS
  echo ""

  echo -n -e "${BOLD_WHITE}Do you want to cherry pick all these commits? (y/n)${WHITE} "
  read answer
  echo -e "${NC}"

  if [[ "$answer" == "y" ]]; then
      git checkout -B $(git rev-parse --abbrev-ref HEAD)-$TEXT
      git cherry-pick $COMMITS
  else
      echo "No problem. Try some other time."
  fi

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        cliferay_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter

  if [[ -z "${LIFERAY_HOME:-}" ]]; then
    printf "missing required environment variable: LIFERAY_HOME\n" >&2
    exit 1
  fi

  # :command.dependencies_filter
  if command -v gh >/dev/null 2>&1; then
    deps['gh']="$(command -v gh | head -n1)"
  else
    printf "missing dependency: gh\n" >&2
    printf "%s\n" "install it from https://cli.github.com" >&2
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    sync)
      action="sync"
      shift
      cliferay_sync_parse_requirements "$@"
      shift $#
      ;;

    brian)
      action="brian"
      shift
      cliferay_brian_parse_requirements "$@"
      shift $#
      ;;

    build)
      action="build"
      shift
      cliferay_build_parse_requirements "$@"
      shift $#
      ;;

    ij)
      action="ij"
      shift
      cliferay_ij_parse_requirements "$@"
      shift $#
      ;;

    gw)
      action="gw"
      shift
      cliferay_gw_parse_requirements "$@"
      shift $#
      ;;

    ant)
      action="ant"
      shift
      cliferay_ant_parse_requirements "$@"
      shift $#
      ;;

    changed-modules | cm)
      action="changed-modules"
      shift
      cliferay_changed_modules_parse_requirements "$@"
      shift $#
      ;;

    super-deploy | sd)
      action="super-deploy"
      shift
      cliferay_super_deploy_parse_requirements "$@"
      shift $#
      ;;

    format-source | sf)
      action="format-source"
      shift
      cliferay_format_source_parse_requirements "$@"
      shift $#
      ;;

    deploy | d)
      action="deploy"
      shift
      cliferay_deploy_parse_requirements "$@"
      shift $#
      ;;

    poshi)
      action="poshi"
      shift
      cliferay_poshi_parse_requirements "$@"
      shift $#
      ;;

    run)
      action="run"
      shift
      cliferay_run_parse_requirements "$@"
      shift $#
      ;;

    kill)
      action="kill"
      shift
      cliferay_kill_parse_requirements "$@"
      shift $#
      ;;

    nuke)
      action="nuke"
      shift
      cliferay_nuke_parse_requirements "$@"
      shift $#
      ;;

    tomcat-folder)
      action="tomcat-folder"
      shift
      cliferay_tomcat_folder_parse_requirements "$@"
      shift $#
      ;;

    morning)
      action="morning"
      shift
      cliferay_morning_parse_requirements "$@"
      shift $#
      ;;

    folder)
      action="folder"
      shift
      cliferay_folder_parse_requirements "$@"
      shift $#
      ;;

    completions)
      action="completions"
      shift
      cliferay_completions_parse_requirements "$@"
      shift $#
      ;;

    curl)
      action="curl"
      shift
      cliferay_curl_parse_requirements "$@"
      shift $#
      ;;

    backport | b)
      action="backport"
      shift
      cliferay_backport_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      cliferay_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_sync_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cliferay_sync_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="sync"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_brian_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cliferay_brian_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="brian"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['pr']+x} ]]; then

          args['pr']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['pr']+x} ]]; then
    printf "missing required argument: PR\nusage: cliferay brian PR\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
cliferay_build_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cliferay_build_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="build"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_ij_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cliferay_ij_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="ij"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_gw_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cliferay_gw_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="gw"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --)
        shift
        other_args+=("$@")
        break
        ;;

      -?*)
        other_args+=("$1")
        shift
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_catch_all
        other_args+=("$1")
        shift

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_ant_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cliferay_ant_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="ant"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --)
        shift
        other_args+=("$@")
        break
        ;;

      -?*)
        other_args+=("$1")
        shift
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_catch_all
        other_args+=("$1")
        shift

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_changed_modules_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cliferay_changed_modules_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="changed-modules"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --branch | -b)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--branch']="$2"
          shift
          shift
        else
          printf "%s\n" "--branch requires an argument: --branch, -b BRANCH" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_super_deploy_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cliferay_super_deploy_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="super-deploy"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --branch | -b)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--branch']="$2"
          shift
          shift
        else
          printf "%s\n" "--branch requires an argument: --branch, -b BRANCH" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_format_source_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cliferay_format_source_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="format-source"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_deploy_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cliferay_deploy_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="deploy"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_poshi_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cliferay_poshi_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="poshi"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['test']+x} ]]; then

          args['test']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['test']+x} ]]; then
    printf "missing required argument: TEST\nusage: cliferay poshi TEST\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
cliferay_run_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cliferay_run_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="run"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_kill_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cliferay_kill_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="kill"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_nuke_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cliferay_nuke_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="nuke"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_tomcat_folder_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cliferay_tomcat_folder_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="tomcat-folder"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_morning_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cliferay_morning_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="morning"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_folder_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cliferay_folder_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="folder"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_completions_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cliferay_completions_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="completions"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_curl_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cliferay_curl_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v jq >/dev/null 2>&1; then
    deps['jq']="$(command -v jq | head -n1)"
  else
    printf "missing dependency: jq\n" >&2
    printf "%s\n" "install it from https://jqlang.github.io/jq" >&2
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    new-instance)
      action="new-instance"
      shift
      cliferay_curl_new_instance_parse_requirements "$@"
      shift $#
      ;;

    new-api)
      action="new-api"
      shift
      cliferay_curl_new_api_parse_requirements "$@"
      shift $#
      ;;

    new-object)
      action="new-object"
      shift
      cliferay_curl_new_object_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      cliferay_curl_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_curl_new_instance_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cliferay_curl_new_instance_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="curl new-instance"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['host']+x} ]]; then

          args['host']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['host']+x} ]]; then
    printf "missing required argument: HOST\nusage: cliferay curl new-instance HOST\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
cliferay_curl_new_api_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cliferay_curl_new_api_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="curl new-api"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_curl_new_object_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cliferay_curl_new_object_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="curl new-object"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cliferay_backport_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cliferay_backport_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="backport"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --branch | -b)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--branch']="$2"
          shift
          shift
        else
          printf "%s\n" "--branch requires an argument: --branch, -b BRANCH" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['text']+x} ]]; then

          args['text']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['text']+x} ]]; then
    printf "missing required argument: TEXT\nusage: cliferay backport TEXT [OPTIONS]\n" >&2
    exit 1
  fi

}

# :command.user_hooks
before_hook() {
  # src/before.sh
  if [[ "${DEBUG}" == 'true' ]]; then
    set -x
  fi
}

# :command.initialize
initialize() {
  version="1.0.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"
  before_hook

  case "$action" in
    "sync") cliferay_sync_command ;;
    "brian") cliferay_brian_command ;;
    "build") cliferay_build_command ;;
    "ij") cliferay_ij_command ;;
    "gw") cliferay_gw_command ;;
    "ant") cliferay_ant_command ;;
    "changed-modules") cliferay_changed_modules_command ;;
    "super-deploy") cliferay_super_deploy_command ;;
    "format-source") cliferay_format_source_command ;;
    "deploy") cliferay_deploy_command ;;
    "poshi") cliferay_poshi_command ;;
    "run") cliferay_run_command ;;
    "kill") cliferay_kill_command ;;
    "nuke") cliferay_nuke_command ;;
    "tomcat-folder") cliferay_tomcat_folder_command ;;
    "morning") cliferay_morning_command ;;
    "folder") cliferay_folder_command ;;
    "completions") cliferay_completions_command ;;
    "curl") cliferay_curl_command ;;
    "curl new-instance") cliferay_curl_new_instance_command ;;
    "curl new-api") cliferay_curl_new_api_command ;;
    "curl new-object") cliferay_curl_new_object_command ;;
    "backport") cliferay_backport_command ;;
  esac
}

initialize
run "$@"
